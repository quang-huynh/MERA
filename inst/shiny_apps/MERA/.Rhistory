i
i<-6
print(paste(i,OMkeep[i],sep=" - "))
i<-8
print(paste(i,OMkeep[i],sep=" - "))
outfile<-paste0("./Complexity of OMs/OMs/",OMkeep[i])
if(!file.exists(outfile))dir.create(outfile)
# The fully specified OM
OMfullfolder<-fullOMs[match(OMkeep[i],fullOMnams)]
OM_full<-readRDS(paste0(OMfullfolder,"/OM.rdata"))
OM_full@interval<-interval
OM_full@cpars$plusgroup=rep(1,nsim)
OM_full@maxage=min(OM_full@maxage,maxage)
if(!is.null(OM_full@cpars$Len_age))if(dim(OM_full@cpars$Len_age)[2]>maxage)OM_full@cpars$Len_age<-OM_full@cpars$Len_age[,1:maxage,]
if(!is.null(OM_full@cpars$Wt_age))if(dim(OM_full@cpars$Wt_age)[2]>maxage)OM_full@cpars$Wt_age<-OM_full@cpars$Wt_age[,1:maxage,]
if(!is.null(OM_full@cpars$V))if(dim(OM_full@cpars$V)[2]>maxage)OM_full@cpars$V<-OM_full@cpars$V[,1:maxage,]
#OM_full<-LH2OM(OM_full,plot=F)
#cpar_by_age<-validcpars()[grepl("maxage",validcpars()[,2]),1]
if(length(OM_full@MPA)!=0) if(!is.na(OM_full@MPA)) print("WARNING MPA exists !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
saveRDS(OM_full,paste0(outfile,"/OM_full.Rdata"))
tempOM<-OM_full
tryCatch({
MSEfull<-runMSE(tempOM,MPs="curE",Hist=T)
},error = function(e){
message(paste0("!!!!!! Hist MSE didn't run for", i, OMkeep[i]," !!!",sep=""))
})
# converted to mera from full OM
OM_conv<-makeMERAOM3(OMf=OM_full,MSEf=MSEfull,nsim=nsim,interval=interval,quants=c(0.05,0.95))
saveRDS(OM_conv,paste0(outfile,"/OM_conv.Rdata"))
OM@L5
OM@LFS
OM_conv@L5
OM_conv@LFS
OMt<-OM
OM_convt<-OM_conv
OMt@nsim<-OM_convt@nsim<-2
MSE<-runMSE(OMt,MPs=testMPs,ntrials=ntrials)
MSE_conv<-runMSE(OM_convt,MPs=testMPs,ntrials=ntrials)
OMkeep[i]
print(paste(i,OMkeep[i],sep=" - "))
outfile<-paste0("./Complexity of OMs/OMs/",OMkeep[i])
if(!file.exists(outfile))dir.create(outfile)
# The fully specified OM
OMfullfolder<-fullOMs[match(OMkeep[i],fullOMnams)]
OM_full<-readRDS(paste0(OMfullfolder,"/OM.rdata"))
OM_full@interval<-interval
OM_full@cpars$plusgroup=rep(1,nsim)
OM_full@maxage=min(OM_full@maxage,maxage)
if(!is.null(OM_full@cpars$Len_age))if(dim(OM_full@cpars$Len_age)[2]>maxage)OM_full@cpars$Len_age<-OM_full@cpars$Len_age[,1:maxage,]
if(!is.null(OM_full@cpars$Wt_age))if(dim(OM_full@cpars$Wt_age)[2]>maxage)OM_full@cpars$Wt_age<-OM_full@cpars$Wt_age[,1:maxage,]
if(!is.null(OM_full@cpars$V))if(dim(OM_full@cpars$V)[2]>maxage)OM_full@cpars$V<-OM_full@cpars$V[,1:maxage,]
#OM_full<-LH2OM(OM_full,plot=F)
#cpar_by_age<-validcpars()[grepl("maxage",validcpars()[,2]),1]
if(length(OM_full@MPA)!=0) if(!is.na(OM_full@MPA)) print("WARNING MPA exists !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
saveRDS(OM_full,paste0(outfile,"/OM_full.Rdata"))
tempOM<-OM_full
tryCatch({
MSEfull<-runMSE(tempOM,MPs="curE",Hist=T)
},error = function(e){
message(paste0("!!!!!! Hist MSE didn't run for", i, OMkeep[i]," !!!",sep=""))
})
# converted to mera from full OM
OM_conv<-makeMERAOM3(OMf=OM_full,MSEf=MSEfull,nsim=nsim,interval=interval,quants=c(0.05,0.95))
saveRDS(OM_conv,paste0(outfile,"/OM_conv.Rdata"))
# from mera
findmera <- list.files(MeraDirs[i])
merafile <- findmera[grepl('.mera',findmera)]
#merafile <- merafile[!grepl('MERA',merafile)]
nmera<-length(merafile)
merakeep<-rep(T,nmera)
if(nmera>1){
for(j in 1:(nmera-1)){
mera<-merafile[j]
MSClog<-readRDS(paste(MeraDirs[i],mera,sep="/"))
PanelState<-MSClog[[1]]
for(k in (j+1):nmera){
mera2<-merafile[k]
MSClog2<-readRDS(paste(MeraDirs[i],mera2,sep="/"))
PanelState2<-MSClog2[[1]]
if(identical(PanelState,PanelState2))merakeep[k]=F
}
}
}
print(merakeep)
merafile2<-merafile[merakeep]
nmera2<-length(merafile2)
for(j in 1:min(nmera2,3)){
print(paste("  -  ",j))
mera<-merafile2[j]
MSClog<-readRDS(paste(MeraDirs[i],mera,sep="/"))
PanelState<-MSClog[[1]]
input<-MSClog[[3]]
input$nyears<-getayear(splity=strsplit(as.character(input$nyears)," ")[[1]])
#input$nyears<-OM_full@nyears
print(paste("input$nyears",input$nyears))
for(x in 1:length(PanelState))for(y in 1:length(PanelState[[x]]) )if(all(!PanelState[[x]][[y]]))PanelState[[x]][[y]]<-rep(TRUE,length(PanelState[[x]][[y]]))
test<-c(unlist(lapply(PanelState[[1]],function(x)sum(x)>0)),unlist(lapply(PanelState[[2]],function(x)sum(x)>0)), unlist(lapply(PanelState[[3]],function(x)sum(x)>0)))
if(!all(test))print(paste(OMkeep[i],sum(!test),sep=" - "))
OM<-makeOM(PanelState,input,nsim=nsim,interval=interval, proyears=proyears,maxage=maxage)
newMSClog<-MSClog
newMSClog[[1]]<-PanelState
newMSClog[[3]]<-input
saveRDS(newMSClog,paste0(MeraDirs[i],"/MERA_",j,".mera"))
saveRDS(OM,paste0(outfile,"/OM_mera_",j,".Rdata"))
}
if(MSEtest){
tryCatch(
{
OMt<-OM
OM_convt<-OM_conv
OMt@nsim<-OM_convt@nsim<-2
MSE<-runMSE(OMt,MPs=testMPs,ntrials=ntrials)
MSE_conv<-runMSE(OM_convt,MPs=testMPs,ntrials=ntrials)
#MSE_full<-runMSE(OM_fullt,MPs=testMPs,ntrials=ntrials)
par(mfrow=c(2,2),mai=rep(0.1,4))
plot(1,1,col="white")
legend('center',legend=paste(i, OMkeep[i]),bty='n')
Ttemp(MSE,main="MERA")
Ttemp(MSE_conv,main="Converted")
#Ttemp(MSE_full,"Full OM")
MSEok[i]<-TRUE
},
error = function(e){
message(paste0("!!!!!!!!!!!!!!!!!!!!!! An MSE didn't run for", i, OMkeep[i]," !!!!!!!!!!!!!!!",sep=""))
}
)
}
MSE<-runMSE(OMt,MPs=testMPs,ntrials=ntrials)
setwd("C:/Users/tcar_/Dropbox/")
setwd("C:/Users/tcarruth/Dropbox/")
fullOMs<-c(list.files("C:/GitHub/DLMDev/Case_Studies",full.names = T),
list.files("C:/GitHub/DLMDev/Case_Studies/Z - INCOMPLETE",full.names = T))
fullOMnams<-c(list.files("C:/GitHub/DLMDev/Case_Studies"),
list.files("C:/GitHub/DLMDev/Case_Studies/Z - INCOMPLETE"))
#fullOMs<-c(list.files("C:/Users/tcarruth/Documents/GitHub/DLMDev/Case_Studies",full.names = T),   list.files("C:/Users/tcarruth/Documents/GitHub/DLMDev/Case_Studies/Z - INCOMPLETE",full.names = T))
#fullOMnams<-c(list.files("C:/Users/tcarruth/Documents/GitHub/DLMDev/Case_Studies"),               list.files("C:/Users/tcarruth/Documents/GitHub/DLMDev/Case_Studies/Z - INCOMPLETE"))
library('MSEtool')
source("./Complexity of OMs/Methods/global4OM.r") #  sets up the global variables that control question mapping for panelstates
source("./Complexity of OMs/Methods/Q_setup.r")   #  Sets up question names and panelstate size / dimensions
source("./Complexity of OMs/Methods/Backwards.r") #  OM to MERA panelstate
source("./Complexity of OMs/Methods/makeOM4.r")    #  Panelstate to OM
source("./Complexity of OMs/Methods/Fishery_figs.r")#Fishery trend calc
testMPs<-c("DCAC","curE","NFref","FMSYref","FMSYref75")
testMPs<-c("DCAC")
nsim=96
interval=4
proyears=50
MSEtest<-TRUE
ntrials=200
maxage=40
# 1 make user defined MERA OMs and save to disk  PanelState > OM_simply
MeraDirs<-list.files("./MERA/MERA_Case_Studies/Case study files",full.names=T)
OMnams<-list.files("./MERA/MERA_Case_Studies/Case study files")
cond<-OMnams%in%fullOMnams  # where full OMs are available
MeraDirs<-MeraDirs[cond]    # only those with full OMs available
OMkeep<-OMnams[cond]
MSEok<-rep(FALSE,length(OMkeep))
print(paste(i,OMkeep[i],sep=" - "))
outfile<-paste0("./Complexity of OMs/OMs/",OMkeep[i])
if(!file.exists(outfile))dir.create(outfile)
# The fully specified OM
OMfullfolder<-fullOMs[match(OMkeep[i],fullOMnams)]
OM_full<-readRDS(paste0(OMfullfolder,"/OM.rdata"))
OM_full@interval<-interval
OM_full@cpars$plusgroup=rep(1,nsim)
OM_full@maxage=min(OM_full@maxage,maxage)
if(!is.null(OM_full@cpars$Len_age))if(dim(OM_full@cpars$Len_age)[2]>maxage)OM_full@cpars$Len_age<-OM_full@cpars$Len_age[,1:maxage,]
if(!is.null(OM_full@cpars$Wt_age))if(dim(OM_full@cpars$Wt_age)[2]>maxage)OM_full@cpars$Wt_age<-OM_full@cpars$Wt_age[,1:maxage,]
if(!is.null(OM_full@cpars$V))if(dim(OM_full@cpars$V)[2]>maxage)OM_full@cpars$V<-OM_full@cpars$V[,1:maxage,]
#OM_full<-LH2OM(OM_full,plot=F)
#cpar_by_age<-validcpars()[grepl("maxage",validcpars()[,2]),1]
if(length(OM_full@MPA)!=0) if(!is.na(OM_full@MPA)) print("WARNING MPA exists !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
saveRDS(OM_full,paste0(outfile,"/OM_full.Rdata"))
tempOM<-OM_full
tryCatch({
MSEfull<-runMSE(tempOM,MPs="curE",Hist=T)
},error = function(e){
message(paste0("!!!!!! Hist MSE didn't run for", i, OMkeep[i]," !!!",sep=""))
})
# converted to mera from full OM
OM_conv<-makeMERAOM3(OMf=OM_full,MSEf=MSEfull,nsim=nsim,interval=interval,quants=c(0.05,0.95))
saveRDS(OM_conv,paste0(outfile,"/OM_conv.Rdata"))
for(i in 6:length(MeraDirs)){ # for(i in (1:length(MSEok))[!MSEok]){
#i<-i+1
print(paste(i,OMkeep[i],sep=" - "))
outfile<-paste0("./Complexity of OMs/OMs/",OMkeep[i])
if(!file.exists(outfile))dir.create(outfile)
# The fully specified OM
OMfullfolder<-fullOMs[match(OMkeep[i],fullOMnams)]
OM_full<-readRDS(paste0(OMfullfolder,"/OM.rdata"))
OM_full@interval<-interval
OM_full@cpars$plusgroup=rep(1,nsim)
OM_full@maxage=min(OM_full@maxage,maxage)
if(!is.null(OM_full@cpars$Len_age))if(dim(OM_full@cpars$Len_age)[2]>maxage)OM_full@cpars$Len_age<-OM_full@cpars$Len_age[,1:maxage,]
if(!is.null(OM_full@cpars$Wt_age))if(dim(OM_full@cpars$Wt_age)[2]>maxage)OM_full@cpars$Wt_age<-OM_full@cpars$Wt_age[,1:maxage,]
if(!is.null(OM_full@cpars$V))if(dim(OM_full@cpars$V)[2]>maxage)OM_full@cpars$V<-OM_full@cpars$V[,1:maxage,]
#OM_full<-LH2OM(OM_full,plot=F)
#cpar_by_age<-validcpars()[grepl("maxage",validcpars()[,2]),1]
if(length(OM_full@MPA)!=0) if(!is.na(OM_full@MPA)) print("WARNING MPA exists !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
saveRDS(OM_full,paste0(outfile,"/OM_full.Rdata"))
tempOM<-OM_full
tryCatch({
MSEfull<-runMSE(tempOM,MPs="curE",Hist=T)
},error = function(e){
message(paste0("!!!!!! Hist MSE didn't run for", i, OMkeep[i]," !!!",sep=""))
})
# converted to mera from full OM
OM_conv<-makeMERAOM3(OMf=OM_full,MSEf=MSEfull,nsim=nsim,interval=interval,quants=c(0.05,0.95))
saveRDS(OM_conv,paste0(outfile,"/OM_conv.Rdata"))
# from mera
findmera <- list.files(MeraDirs[i])
merafile <- findmera[grepl('.mera',findmera)]
#merafile <- merafile[!grepl('MERA',merafile)]
nmera<-length(merafile)
merakeep<-rep(T,nmera)
if(nmera>1){
for(j in 1:(nmera-1)){
mera<-merafile[j]
MSClog<-readRDS(paste(MeraDirs[i],mera,sep="/"))
PanelState<-MSClog[[1]]
for(k in (j+1):nmera){
mera2<-merafile[k]
MSClog2<-readRDS(paste(MeraDirs[i],mera2,sep="/"))
PanelState2<-MSClog2[[1]]
if(identical(PanelState,PanelState2))merakeep[k]=F
}
}
}
print(merakeep)
merafile2<-merafile[merakeep]
nmera2<-length(merafile2)
for(j in 1:min(nmera2,3)){
print(paste("  -  ",j))
mera<-merafile2[j]
MSClog<-readRDS(paste(MeraDirs[i],mera,sep="/"))
PanelState<-MSClog[[1]]
input<-MSClog[[3]]
input$nyears<-getayear(splity=strsplit(as.character(input$nyears)," ")[[1]])
#input$nyears<-OM_full@nyears
print(paste("input$nyears",input$nyears))
for(x in 1:length(PanelState))for(y in 1:length(PanelState[[x]]) )if(all(!PanelState[[x]][[y]]))PanelState[[x]][[y]]<-rep(TRUE,length(PanelState[[x]][[y]]))
test<-c(unlist(lapply(PanelState[[1]],function(x)sum(x)>0)),unlist(lapply(PanelState[[2]],function(x)sum(x)>0)), unlist(lapply(PanelState[[3]],function(x)sum(x)>0)))
if(!all(test))print(paste(OMkeep[i],sum(!test),sep=" - "))
OM<-makeOM(PanelState,input,nsim=nsim,interval=interval, proyears=proyears,maxage=maxage)
newMSClog<-MSClog
newMSClog[[1]]<-PanelState
newMSClog[[3]]<-input
saveRDS(newMSClog,paste0(MeraDirs[i],"/MERA_",j,".mera"))
saveRDS(OM,paste0(outfile,"/OM_mera_",j,".Rdata"))
}
if(MSEtest){
tryCatch(
{
OMt<-OM
OM_convt<-OM_conv
OMt@nsim<-OM_convt@nsim<-2
MSE<-runMSE(OMt,MPs=testMPs,ntrials=ntrials)
MSE_conv<-runMSE(OM_convt,MPs=testMPs,ntrials=ntrials)
#MSE_full<-runMSE(OM_fullt,MPs=testMPs,ntrials=ntrials)
par(mfrow=c(2,2),mai=rep(0.1,4))
plot(1,1,col="white")
legend('center',legend=paste(i, OMkeep[i]),bty='n')
Ttemp(MSE,main="MERA")
Ttemp(MSE_conv,main="Converted")
#Ttemp(MSE_full,"Full OM")
MSEok[i]<-TRUE
},
error = function(e){
message(paste0("!!!!!!!!!!!!!!!!!!!!!! An MSE didn't run for", i, OMkeep[i]," !!!!!!!!!!!!!!!",sep=""))
}
)
}
}
shiny::runApp('C:/GitHub/MERA/inst/shiny_apps/MERA')
runApp()
runApp('C:/GitHub/MERA/inst/shiny_apps/MERA')
runApp('C:/GitHub/MERA/inst/shiny_apps/MERA')
runApp('C:/GitHub/MERA/inst/shiny_apps/MERA')
temp<-readRDS("C:/temp/Eff_values.rda")
temp
#eff_values<-readRDS(".dat/eff_values.rda")
eff_values<-readRDS(".dat/eff_values.rda")
setwd("C:/GitHub/MERA/vignettes")
eff_values<-readRDS(".dat/eff_values.rda")
getwd()
runApp('C:/GitHub/MERA/inst/shiny_apps/MERA')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
source('C:/GitHub/MERA/inst/shiny_apps/MERA/Source/Skins/MSC.R', echo=TRUE)
source('C:/GitHub/MERA/inst/shiny_apps/MERA/Source/Skins/MSC.R', echo=TRUE)
runApp()
0.9^5
0.9^3
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
eff_values
eff_values<-readRDS("C:/temp/eff_values.rda")
rbind(eff_values$df,eff_values$df[nrow(eff_values$df),])
eff_values$df$x[nrow(eff_values$df)]
lastX <- eff_values$df$x[nrow(eff_values$df)]
lastX
runApp()
temp<-readRDS("C:/temp/Tiger_flathead.mera")
temp$MSClog
temp[[3]]
MSClog<-temp
"nyears" %in% names(MSClog[[3]])
MSClog[[3]]$Lyear
MSClog[[3]]$Syear
2018-MSClog[[3]]$nyears+1
"nyears" %in% names(MSClog[[3]])
runApp()
cond<-sum(names(MSClog[[1]])[1:4]==c("Fpanel","Mpanel","Dpanel","Slider"))==4
cond
PanelState<<-MSClog[[1]]
Just<<-MSClog[[2]]
i<-3
j<-4
state<-as.vector(unlist(PanelState[[i]][j]))
choices<-as.vector(unlist(get(MasterList[[i]][j])))
selected<-as.list(choices[state])
choices<-as.list(choices)
choices
MSClog[[1]]
cond
MSClog[[1]]
sum(names(MSClog[[1]])[1:4]==c("Fpanel","Mpanel","Dpanel","Slider"))
all(names(MSClog[[1]])[1:4]==c("Fpanel","Mpanel","Dpanel","Slider"))
cond<-all(names(MSClog[[1]])[1:4]==c("Fpanel","Mpanel","Dpanel","Slider"))
AM("Questionnaire loaded")
cond
runApp()
names(MSClog)
temp<-readRDS("C:/temp/Tiger_flathead.mera")
MSClog<-temp
names(MSClog)
names(temp)
temp[[1]]
temp[[2]]
temp3
MSClog[[1]]
MSClog[[2]]
MSClog[[3]]
MSClog[[4]]
runApp()
MSClog[[3]]
M1s
MSClog[[1]]
PanelState<-MSClog[[1]]
loc<-match("FP",inputnames[[1]])
cond<-(1:length(unlist(PanelState[[1]][loc])))[unlist(PanelState[[1]][loc])]
cond
inputnames
loc<-match("FP",inputnames[[1]])
cond<-(1:length(unlist(PanelState[[1]][loc])))[unlist(PanelState[[1]][loc])]
cond
loc
PanelState[[1]][loc]
all(!cond)
cond<-(1:length(unlist(PanelState[[1]][loc])))[unlist(PanelState[[1]][loc])]
if(all(!cond))cond<-!cond
nt<-length(cond)
M1sim<-M1s[cond]
M2sim<-M2s[cond]
sd1sim<-sd1s[cond]
sd2sim<-sd2s[cond]
h2sim<-h2s[cond]
locsim<-PanelState[[4]][[1]]
stmagsim<-PanelState[[4]][[2]]
cosim<-PanelState[[4]][[3]]
Find<-array(NA,c(nt,nyears))
for(i in 1:nt)Find[i,]<-Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=locsim,start_mag=2-stmagsim,co=cosim,bm=F,plot=F)
Find<-Find/apply(Find,1,max)
runApp()
"nyears"%in%names(MSClog[[3]])
"nyears"%in%names(MSClog[[3]])
yrs<-MSClog[[3]]$Syear:MSClog[[3]]$Lyear
nyears<-length(yrs)
nyears
loc<-match("FP",inputnames[[1]])
cond<-(1:length(unlist(PanelState[[1]][loc])))[unlist(PanelState[[1]][loc])]
if(all(!cond))cond<-!cond
nt<-length(cond)
M1sim<-M1s[cond]
M2sim<-M2s[cond]
sd1sim<-sd1s[cond]
sd2sim<-sd2s[cond]
h2sim<-h2s[cond]
locsim<-PanelState[[4]][[1]]
stmagsim<-PanelState[[4]][[2]]
cosim<-PanelState[[4]][[3]]
Find<-array(NA,c(nt,nyears))
M1sim
cond
cond<-(1:length(unlist(PanelState[[1]][loc])))[unlist(PanelState[[1]][loc])]
cond
loc<-match("FP",inputnames[[1]])
loc
cond<-(1:length(unlist(PanelState[[1]][loc])))[unlist(PanelState[[1]][loc])]
if(all(!cond))cond<-!cond
cond
cond<-(1:length(unlist(PanelState[[1]][loc])))[unlist(PanelState[[1]][loc])]
cond
PanelState[[1]]
unlist(PanelState[[1]][loc])
cond<-unlist(PanelState[[1]][loc])
cond
if(all(!cond))cond<-!cond
nt<-length(cond)
M1sim<-M1s[cond]
M2sim<-M2s[cond]
sd1sim<-sd1s[cond]
sd2sim<-sd2s[cond]
h2sim<-h2s[cond]
locsim<-PanelState[[4]][[1]]
stmagsim<-PanelState[[4]][[2]]
cosim<-PanelState[[4]][[3]]
Find<-array(NA,c(nt,nyears))
M1sim
runApp()
PanelState[[4]][[2]]
PanelState[[4]]
runApp()
MSClog<-readRDS("C:/temp2/Tiger_flathead_depleted.mera")
"nyears"%in%names(MSClog[[3]])
names(MSClog[[3]])
nyears<-MSClog[[3]]$nyears
yrs<-Current_Year-(nyears:1)
PanelState<-MSClog[[1]]
loc<-match("FP",inputnames[[1]])
cond<-unlist(PanelState[[1]][loc])
if(all(!cond))cond<-!cond
nt<-length(cond)
M1sim<-M1s[cond]
M2sim<-M2s[cond]
sd1sim<-sd1s[cond]
sd2sim<-sd2s[cond]
h2sim<-h2s[cond]
locsim<-PanelState[[4]][[1]]
stmagsim<-PanelState[[4]][[2]]
cosim<-PanelState[[4]][[3]]
Find<-array(NA,c(nt,nyears))
stmagsim
nyears
h2sim
sd2sim
M1sim
nt
M1sim
cond
loc<-match("FP",inputnames[[1]])
cond<-(1:length(PanelState[[1]][loc]))(unlist(PanelState[[1]][loc])
cond<-(1:length(PanelState[[1]][loc]))[unlist(PanelState[[1]][loc])]
cond<-(1:length(PanelState[[1]][loc]))[unlist(PanelState[[1]][loc])]
cond
1:length(PanelState[[1]][loc])
length(PanelState[[1]][loc]
)
unlist(PanelState[[1]][loc])
sels<-unlist(PanelState[[1]][loc])
cond<-(1:length(sels))[sels]
cond
loc<-match("FP",inputnames[[1]])
sels<-unlist(PanelState[[1]][loc])
cond<-(1:length(sels))[sels]
nt<-length(cond)
M1sim<-M1s[cond]
M2sim<-M2s[cond]
sd1sim<-sd1s[cond]
sd2sim<-sd2s[cond]
h2sim<-h2s[cond]
locsim<-PanelState[[4]][[1]]
stmagsim<-PanelState[[4]][[2]]
cosim<-PanelState[[4]][[3]]
Find<-array(NA,c(nt,nyears))
nt
runApp()
MSClog<-readRDS("C:/temp2/Tiger_flathead.mera")
names(MSClog)
"eff_values"%in%names(MSClog)
MSClog$eff_values$stack
as.list(MSClog$eff_values)
reactiveValuesToList(MSClog$eff_values)
runApp()
MSClog<-readRDS("C:/temp2/Tiger_flathead.mera")
MSClog$eff_values
names(MSClog)
MSClog
runApp()
MSClog<-readRDS("C:/temp2/Tiger_flathead (4).mera")
MSClog$eff_values
runApp()
shiny::runApp()
shiny::runApp()
MSClog<-readRDS("C:/temp2/Tiger_flathead (5).rda")
MSClog<-readRDS("C:/temp2/Tiger_flathead (5).mera")
MSClog$eff_values
"eff_values"%in%names(MSClog)
runApp()
shiny::runApp()
