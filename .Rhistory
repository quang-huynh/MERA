"Absolute biomass survey"="cur_bio_sur")
CB_list<<-list("Strong under-reporting (30% - 50%)" = "CB_n50_n30", "Under-reporting (10% - 30%)" = "CB_n30_n10","Slight under-reporting (less than 10%)" = "CB_n10_0",
"Reported accurately (+/- 5%)" = "CB_n5_5","Slight over-reporting (less than 10%)" = "CB_0_10")
CB_mins<- c( 0.5,   0.7,      0.9,     0.95,      1)
CB_maxes<-c( 0.7,   0.9,      1,       1.05,      1.1)
Beta_list<<-list("Strong hyperdepletion (2 < Beta < 3)" = "Beta_200_300", "Hyperdepletion (1.25 < Beta < 2)" = "Beta_125_200","Proportional (0.8 < Beta < 1.25)" = "Beta_80_125",
"Hyperstability (0.5 < Beta < 0.8)" = "Beta_50_80","Strong hyperstability (0.33 < Beta < 0.5)"="Beta_33_50")
Beta_mins<- c( 2,                1.25,          0.8,           0.50,        0.33)
Beta_maxes<-c( 3,                2,             1.25,          0.8,         0.50)
Err_list<<-list("Perfect" = "Err_perf","Good (accurate and precise)" = "Err_good","Data moderate (some what inaccurate and imprecise)"="Err_Mod",
"Data poor (inaccurate and imprecise)" = "Err_bad")
# ------ Sliders -----------------------------------------------------------------------------------
loc<<-list("loc"=1)
stmag<<-list("stmag"=1)
nyears<-68 # 1950-2018
nsim<-48
makeState<-function(x)rep(T,length(get(x)))
Fpanel_names<-c("M_list","D_list","h_list","FP_list","F_list","qh_list","q_list","LM_list","sel_list","dome_list","DR_list","PRM_list","sigR_list","Ah_list","Vh_list","A_list","V_list","Dh_list")
Mpanel_names<-c("M1_list","IB_list","IV_list","IBE_list","IVE_list","IBSL_list","IVSL_list")
Dpanel_names<-c("D1_list","CB_list","Beta_list","Err_list")
Slider_names<-c("loc","stmag")
MasterList<<-list(Fpanel_names,Mpanel_names,Dpanel_names,Slider_names)
PanelState<-list(Fpanel=lapply(Fpanel_names, makeState),
Mpanel=lapply(Mpanel_names, makeState),
Dpanel=lapply(Dpanel_names, makeState),
Slider=lapply(Slider_names, makeState))
PanelState[[1]][[18]]<-c(F,F,F,F,T) # Exception is the final fishery initial depletion
PanelState[[3]][[4]]<-c(F,F,F,T) # Exception is the final selection of the data menu - quality is a radio button default to data-poor
getinputnames<-function(x)strsplit(x,"_")[[1]][1]
inputnames<<-list(Fpanel=lapply(Fpanel_names,getinputnames),
Mpanel=lapply(Mpanel_names,getinputnames),
Dpanel=lapply(Dpanel_names,getinputnames),
Slider=lapply(Slider_names,getinputnames))
inputtabs<-as.vector(unlist(inputnames))
library(DLMtool)
library(MSEtool)
OM<-LowSlopes(testOM)
LowSlopes<-function(OMin, except = NULL) {
nms <- slotNames(OMin)
# exceptions
if (is.null(except)) except <- "EVERYTHING"
exclude <- unique(grep(paste(except, collapse = "|"), nms, value = FALSE))
vars <- c("grad", "inc","sd")
ind <- unique(grep(paste(vars, collapse = "|"), nms, value = FALSE))
ind <- ind[(!(nms[ind] %in% exclude))]
for (X in seq_along(ind)) {
slot(OMin, nms[ind[X]]) <- c(0, 1e-10)
}
return(OMin)
}
OM<-LowSlopes(testOM)
OM@R0<-100000
OM@nsim<-nsim
OM@Linf<-c(100,100)
OM@L50<-NaN
OM@K<-NaN
OM@isRel<-"FALSE"
OM@Name<-input$Name
OM@Species<-input$Species
OM@Region<-input$Region
OM@Agency<-input$Agency
if(is.na(nyears)){
if(is.na(as.integer(input$nyears))){
OM@nyears<-68
}else{
OM@nyears<-as.integer(input$nyears)
}
}else{
OM@nyears<-nyears
}
nyears<-OM@nyears
nyears<-68
OM@nyears<-nyears
loc<-match("Err",inputnames[[3]])
cond<-as.vector(unlist(PanelState[[3]][loc]))
Dquality<-as.vector(unlist(Err_list)[cond])
if(Dquality=="Err_perf"){
temp<-new('OM',Albacore,Generic_Fleet,Perfect_Info,Perfect_Imp)
}else if(Dquality=="Err_good"){
temp<-new('OM',Albacore,Generic_Fleet,Precise_Unbiased,Perfect_Imp)
}else if(Dquality=="Err_mod"){
temp<-new('OM',Albacore,Generic_Fleet,Generic_obs,Perfect_Imp)
}else{
temp<-new('OM',Albacore,Generic_Fleet,Imprecise_Biased,Perfect_Imp)
}
OM<-Replace(OM,temp,Sub="Obs")
OM@M<-getminmax(1,"M",PanelState)
source('~/GitHub/MERA/inst/shiny_apps/MERA/Misc.R', echo=TRUE)
OM@M<-getminmax(1,"M",PanelState)
getminmax<-function(panel,parameter,PanelState){
loc<-match(parameter,inputnames[[panel]])
mins<-get(paste0(parameter,"_mins"))
maxs<-get(paste0(parameter,"_maxes"))
cond<-unlist(PanelState[[panel]][loc])
range(mins[cond],maxs[cond])
}
OM@M<-getminmax(1,"M",PanelState)
if(is.na(maxage)){
OM@maxage=ceiling(-log(0.02)/min(OM@M))
}else{
OM@maxage=maxage
}
maxage<-32
OM@maxage=maxage
OM<-LH2OM(OM, dist='norm')
PanelState
inputnames
OM@L50<-getminmax(1,"LM",PanelState)
OM@L50
OM<-LH2OM(OM, dist='norm')
OM<-Replace(OM,temp,Sub="Obs")
OM@M<-getminmax(1,"M",PanelState)
OM@L50<-getminmax(1,"LM",PanelState)
if(is.na(maxage)){
OM@maxage=ceiling(-log(0.02)/min(OM@M))
}else{
OM@maxage=maxage
}
OM<-LH2OM(OM, dist='norm')
OM<-LowSlopes(testOM)
OM@R0<-100000
OM@nsim<-nsim
OM@Linf<-c(100,100)
OM@L50<-NaN
OM@K<-NaN
OM@isRel<-"FALSE"
OM@Name<-input$Name
OM@Species<-input$Species
OM@Region<-input$Region
OM@Agency<-input$Agency
if(is.na(nyears)){
if(is.na(as.integer(input$nyears))){
OM@nyears<-68
}else{
OM@nyears<-as.integer(input$nyears)
}
}else{
OM@nyears<-nyears
}
nyears<-OM@nyears
OM@Source<-input$Author
OM@interval<-input$interval
OM@proyears<-input$proyears
#save(OM,file="OM.Rdata")  # debug
loc<-match("Err",inputnames[[3]])
cond<-as.vector(unlist(PanelState[[3]][loc]))
Dquality<-as.vector(unlist(Err_list)[cond])
if(Dquality=="Err_perf"){
temp<-new('OM',Albacore,Generic_Fleet,Perfect_Info,Perfect_Imp)
}else if(Dquality=="Err_good"){
temp<-new('OM',Albacore,Generic_Fleet,Precise_Unbiased,Perfect_Imp)
}else if(Dquality=="Err_mod"){
temp<-new('OM',Albacore,Generic_Fleet,Generic_obs,Perfect_Imp)
}else{
temp<-new('OM',Albacore,Generic_Fleet,Imprecise_Biased,Perfect_Imp)
}
OM<-Replace(OM,temp,Sub="Obs")
# Fishery characteristics -------
OM@M<-getminmax(1,"M",PanelState)
OM@L50<-getminmax(1,"LM",PanelState)
if(is.na(maxage)){
OM@maxage=ceiling(-log(0.02)/min(OM@M))
}else{
OM@maxage=maxage
}
OM<-LH2OM(OM, dist='norm')
?LH2OM
OM@K<-quantile(OM@cpars$K,c(0.05,0.95))
OM@L50<-quantile(OM@cpars$L50,c(0.05,0.95))
OM@L50_95<-c(10,10)
OM@L50
OM@L50_95<-c(10,10)
OM@Linf<-c(100,100)
OM@M<-getminmax(1,"M",PanelState)
OM@D<-getminmax(1,"D",PanelState)
OM@h<-getminmax(1,"h",PanelState)
OM@D
qhs<-getminmax(1,"qh",PanelState)
qhs
qssim<-runif(nsim,qhs[1],qhs[2])
qssim
qssim
qssim<-runif(nsim,qhs[1],qhs[2])/100
yrs<-1:nyears
qssim<-runif(nsim,qhs[1],qhs[2])/100
loc<-match("FP",inputnames[[1]])
cond<-(1:length(unlist(PanelState[[1]][loc])))[unlist(PanelState[[1]][loc])]
Ftype<<-sample(cond,nsim,replace=T)
M1sim<-M1s[Ftype]
M2sim<-M2s[Ftype]
sd1sim<-sd1s[Ftype]
sd2sim<-sd2s[Ftype]
h2sim<-h2s[Ftype]
locsim<-PanelState[[4]][[1]]
stmagsim<-PanelState[[4]][[2]]
Find<-array(NA,c(nsim,nyears))
warp<-function(n,y,ploty=F){ # linear warping function
ny<-length(y)
ip<-seq(1,ny,length.out=n)
out<-rep(NA,n)
out[1]<-y[1]
out[n]<-y[ny]
for(i in 2:(n-1)){
li<-floor(ip[i])
ui<-ceiling(ip[i])
dif<-y[ui]-y[li]
frac<-ip[i]-floor(ip[i])
out[i]<-y[li]+frac*dif
}
if(ploty)plot(y);points(ip,out,col='red',pch=2)
out
}
Ftrendfunc<-function(M1=0.2,M2=1.2,sd1=0.1,sd2=0.3,h2=2,ny=68,loc=1,start_mag=1,bm=F,ploty=F){
# M1=0.4; M2=1.2; sd1=0.1; sd2=0.3; h2=1; ny=68; loc=1; start_mag=0.2; bm=F;  plot=T
# M1=0.2; M2=0.7; sd1=0.1; sd2=0.18; h2=0; ny=68; loc=1; start_mag=0.2; bm=F; plot=T
# M1=0.32; M2=0.75; sd1=0.14; sd2=0.15; h2=0; ny=68; loc=1; start_mag=1; bm=T; plot=T
E<-E1<-E2<-rep(NA,ny)
ind<-1:ny
E1<-dnorm(ind,M1*ny,sd1*ny)
E1<-E1/max(E1)
E2<-dnorm(ind,M2*ny,sd2*ny)
E2<-E2/max(E2)
if(bm){
E<-E1+E2
}else{
ind1<-1:floor(M1*ny)
E[ind1]<-E1[ind1]
ind12<-(floor(M1*ny)+1):ceiling(M2*ny)
ind12<-ind12[ind12<=ny]
E[ind12]<-1
d2<-dnorm(ind12,M2*ny,sd2*ny)
E[ind12]<-E[ind12]+(d2/max(d2))*h2
ind2<-(ceiling(M2*ny)+1):ny
if(ind2[1]<ind2[2]){
E[ind2]<-E2[ind2]
E[ind2]<-E[ind2]/max(E[ind2])*max(E[ind12])
}
}
E<-E/mean(E)
ET<-E
# Stretching and transformations (y)
dEdy<-(E[2:ny]/E[1:(ny-1)]-1)^2
mp<-match(min(dEdy),dEdy)
if(bm)mp<-floor(0.5*ny)
find<-(mp+1):ny
if(start_mag>1){
ET[find]<-(E[find]-E[mp])*(2-start_mag)+E[mp]
}else{ # end magnitude larger
ET[1:mp]<-E[1:mp]*start_mag
cond<-E[find]>E[mp]
ET[find[cond]]<-E[find[cond]]-E[mp]+(E[mp]*start_mag)
frac<-E[find[!cond]]/(E[mp]+E[find[!cond]])
logitf<-log(frac/(1-frac))
newlogit<-logitf*(1/start_mag)
ET[find[!cond]]<-E[find[!cond]]*start_mag*2*exp(newlogit)/(1+exp(newlogit))
}
ET<-ET/mean(ET)
x1<-1:mp
x3<-(mp+1):ny
if(loc<1){
newmp<-ceiling(mp*loc)
}else{
newmp<-floor(mp+(ny-mp)*(loc-1))
}
ET2<-ET
if(newmp>1 & newmp<ny){
x2<-1:newmp
ET2[x2]<-warp(newmp,ET[x1],ploty=ploty)
x4<-(newmp+1):ny
ET2[x4]<-warp(ny-newmp,ET[x3],ploty=ploty)
}
ET2<-ET2/mean(ET2)
if(ploty){
plot(E,ylim=c(0,max(E)*1.05),type="l")
lines(ET,col='red')
lines(ET2,col='blue')
}
ET2
}
for(i in 1:nsim)Find[i,]<-Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=locsim,start_mag=stmagsim,bm=F,plot=F)
Find[i,]
Find
matplot(t(Find),type='l')
for(i in 1:nsim)Find[i,]<-Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=0.5,start_mag=0.5,bm=F,plot=F)
matplot(t(Find),type='l')
for(i in 1:nsim)Find[i,]<-Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=locsim,start_mag=stmagsim,bm=F,plot=F)
plot()
plot(1)
for(i in 1:nsim)Find[i,]<-Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=locsim,start_mag=stmagsim,bm=F,plot=F)
matplot(t(Find),type='l')
plot(1)
for(i in 1:nsim)Find[i,]<-Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=0.5,start_mag=0.5,bm=F,plot=F)
matplot(t(Find),type='l')
for(i in 1:nsim)Find[i,]<-Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=0.5,start_mag=0.1,bm=F,plot=F)
matplot(t(Find),type='l')
Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=locsim,start_mag=2-stmagsim,bm=F,plot=F)
for(i in 1:nsim)Find[i,]<-Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=locsim,start_mag=2-stmagsim,bm=F,plot=F)
Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=locsim,start_mag=2-stmagsim,bm=F,plot=F)
matplot(t(Find),type='l')
for(i in 1:nsim)Find[i,]<-Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=0.5,start_mag=2-0.1,bm=F,plot=F)
matplot(t(Find),type='l')
warp<-function(n,y,ploty=F){ # linear warping function
ny<-length(y)
ip<-seq(1,ny,length.out=n)
out<-rep(NA,n)
out[1]<-y[1]
out[n]<-y[ny]
for(i in 2:(n-1)){
li<-floor(ip[i])
ui<-ceiling(ip[i])
dif<-y[ui]-y[li]
frac<-ip[i]-floor(ip[i])
out[i]<-y[li]+frac*dif
}
if(ploty){
plot(y)
points(ip,out,col='red',pch=2)
}
out
}
for(i in 1:nsim)Find[i,]<-Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=locsim,start_mag=2-stmagsim,bm=F,plot=F)
matplot(t(Find),type='l')
for(i in 1:nsim)Find[i,]<-Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=0.5,start_mag=2-0.1,bm=F,plot=F)
matplot(t(Find),type='l')
for(i in 1:nsim)Find[i,]<-Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=0.5,start_mag=2-0.5,bm=F,plot=F)
matplot(t(Find),type='l')
qhs<-getminmax(1,"qh",PanelState)
qssim<-runif(nsim,qhs[1],qhs[2])/100
qssim
qssim<-1+runif(nsim,qhs[1],qhs[2])/100
qssim
qssim[i]^(nyears/2)-(1:nyears)
qssim[i]
qssim[i]^((nyears/2)-(1:nyears))
qssim[i]
(nyears/2)-(1:nyears)
qssim[i]^((1:nyears)-(nyears/2))
for(i in 1:nsim)Find[i,]<-Find[i,]*Esdarray[i,]* qssim[i]^((1:nyears)-(nyears/2))
Esd<-getminmax(1,"F",PanelState)
Esd_max<-Esd[2]
Esd_min<-Esd[1]
Esdrand<-runif(nsim,Esd_min,Esd_max)
Emu<-(-0.5*Esdrand^2)
Esdarray<-array(exp(rnorm(nsim*nyears,Emu,Esdrand)),c(nsim,nyears))
for(i in 1:nsim)Find[i,]<-Find[i,]*Esdarray[i,]* qssim[i]^((1:nyears)-(nyears/2))
matplot(t(Find),type='l')
runApp('inst/shiny_apps/MERA')
OM@M<-getminmax(1,"M",PanelState)                                                         # F2 ----------
OM@L50<-getminmax(1,"LM",PanelState)                                                      # F9 ----------
if(is.na(maxage)){
OM@maxage=ceiling(-log(0.02)/min(OM@M))
}else{
OM@maxage=maxage
}
OM<-LH2OM(OM, dist='norm')
OM<-LowSlopes(testOM)
OM@R0<-100000
OM@nsim<-nsim
OM@Linf<-c(100,100)
OM@L50<-NaN
OM@K<-NaN
OM@isRel<-"FALSE"
OM@Name<-input$Name
OM@Species<-input$Species
OM@Region<-input$Region
OM@Agency<-input$Agency
if(is.na(nyears)){
if(is.na(as.integer(input$nyears))){
OM@nyears<-68
}else{
OM@nyears<-as.integer(input$nyears)
}
}else{
OM@nyears<-nyears
}
nyears<-OM@nyears
OM@Source<-input$Author
OM@interval<-input$interval
OM@proyears<-input$proyears
#save(OM,file="OM.Rdata")  # debug
loc<-match("Err",inputnames[[3]])
cond<-as.vector(unlist(PanelState[[3]][loc]))
Dquality<-as.vector(unlist(Err_list)[cond])
if(Dquality=="Err_perf"){
temp<-new('OM',Albacore,Generic_Fleet,Perfect_Info,Perfect_Imp)
}else if(Dquality=="Err_good"){
temp<-new('OM',Albacore,Generic_Fleet,Precise_Unbiased,Perfect_Imp)
}else if(Dquality=="Err_mod"){
temp<-new('OM',Albacore,Generic_Fleet,Generic_obs,Perfect_Imp)
}else{
temp<-new('OM',Albacore,Generic_Fleet,Imprecise_Biased,Perfect_Imp)
}
OM<-Replace(OM,temp,Sub="Obs")
# Fishery characteristics -------
OM@M<-getminmax(1,"M",PanelState)                                                         # F2 ----------
OM@L50<-getminmax(1,"LM",PanelState)                                                      # F9 ----------
if(is.na(maxage)){
OM@maxage=ceiling(-log(0.02)/min(OM@M))
}else{
OM@maxage=maxage
}
OM<-LH2OM(OM, dist='norm')
?OM
class?OM
inputnames
qs<-getminmax(1,"q",PanelState)
qs
Sel50<-getminmax(1,"sel",PanelState)
Sel50sim<-runif(nsim,Sel50[1],Sel50[2])
Sel50sim
Sel50sim
OM@Linf
OM<-LowSlopes(testOM)
OM@R0<-100000
OM@nsim<-nsim
OM@Linf<-c(100,100)
OM@L50<-NaN
OM@K<-NaN
OM@isRel<-"FALSE"
OM@Name<-input$Name
OM@Species<-input$Species
OM@Region<-input$Region
OM@Agency<-input$Agency
if(is.na(nyears)){
if(is.na(as.integer(input$nyears))){
OM@nyears<-68
}else{
OM@nyears<-as.integer(input$nyears)
}
}else{
OM@nyears<-nyears
}
nyears<-OM@nyears
OM@Source<-input$Author
OM@interval<-input$interval
OM@proyears<-input$proyears
#save(OM,file="OM.Rdata")  # debug
loc<-match("Err",inputnames[[3]])
cond<-as.vector(unlist(PanelState[[3]][loc]))
Dquality<-as.vector(unlist(Err_list)[cond])
if(Dquality=="Err_perf"){
temp<-new('OM',Albacore,Generic_Fleet,Perfect_Info,Perfect_Imp)
}else if(Dquality=="Err_good"){
temp<-new('OM',Albacore,Generic_Fleet,Precise_Unbiased,Perfect_Imp)
}else if(Dquality=="Err_mod"){
temp<-new('OM',Albacore,Generic_Fleet,Generic_obs,Perfect_Imp)
}else{
temp<-new('OM',Albacore,Generic_Fleet,Imprecise_Biased,Perfect_Imp)
}
OM<-Replace(OM,temp,Sub="Obs")
# Fishery characteristics -------
OM@M<-getminmax(1,"M",PanelState)                                                         # F2 ----------
OM@L50<-getminmax(1,"LM",PanelState)                                                      # F9 ----------
if(is.na(maxage)){
OM@maxage=ceiling(-log(0.02)/min(OM@M))
}else{
OM@maxage=maxage
}
OM<-LH2OM(OM, dist='norm')
OM@Linf
OM@K<-quantile(OM@cpars$K,c(0.05,0.95))
OM@L50<-quantile(OM@cpars$L50,c(0.05,0.95))
OM@L50_95<-c(10,10)
OM@Linf<-c(100,100)
OM@D<-getminmax(1,"D",PanelState)                                                        # F3 -----------
OM@h<-getminmax(1,"h",PanelState)                                                        # F4 -----------
OM@cpars$Linf
loc<-match("FP",inputnames[[1]])
cond<-(1:length(unlist(PanelState[[1]][loc])))[unlist(PanelState[[1]][loc])]
Ftype<<-sample(cond,nsim,replace=T)
M1sim<-M1s[Ftype]
M2sim<-M2s[Ftype]
sd1sim<-sd1s[Ftype]
sd2sim<-sd2s[Ftype]
h2sim<-h2s[Ftype]
locsim<-PanelState[[4]][[1]]
stmagsim<-PanelState[[4]][[2]]
Find<-array(NA,c(nsim,nyears))
#Ftrendfunc<-function(                 M1=0.2,M2=1.2,sd1=0.1,sd2=0.3,h2=2,ny=68,loc=1,start_mag=1,bm=F,plot=F){
for(i in 1:nsim)Find[i,]<-Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=locsim,start_mag=2-stmagsim,bm=F,plot=F)
# for(i in 1:nsim)Find[i,]<-Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=0.5,start_mag=2-0.5,bm=F,plot=F)
Esd<-getminmax(1,"F",PanelState)                                                         # F6 ----------
Esd_max<-Esd[2]
Esd_min<-Esd[1]
Esdrand<-runif(nsim,Esd_min,Esd_max)
Emu<-(-0.5*Esdrand^2)
Esdarray<-array(exp(rnorm(nsim*nyears,Emu,Esdrand)),c(nsim,nyears))
qhs<-getminmax(1,"qh",PanelState)
qssim<-1+runif(nsim,qhs[1],qhs[2])/100                                                   # F7 ----------
for(i in 1:nsim)Find[i,]<-Find[i,]*Esdarray[i,]* qssim[i]^((1:nyears)-(nyears/2))
# --- Future catchability ----------
OM@qinc<-getminmax(1,"q",PanelState)                                                     # F8 ----------
# --- Selectivity -----------------------
Sel50<-getminmax(1,"sel",PanelState)
Sel50sim<-runif(nsim,Sel50[1],Sel50[2])
Sel50
Sel50sim<-runif(nsim,Sel50[1],Sel50[2])
Sel50sim
Sel50sim*0.8
OM@Linf*Sel50sim*0.8
OM@Linf
OM@cpars$Linf
Sel50sim
OM@cpars$Linf*Sel50sim*0.8
OM@cpars$Linf*Sel50sim*1.2
L5<-OM@cpars$Linf*Sel50sim*0.8
LFS<-OM@cpars$Linf*Sel50sim*1.2
cond<-LFS>0.95*OM@cpars$Linf
LFS[cond]<-0.95*OM@cpars$Linf[cond]
LFS
OM@Vmaxlen<-getminmax(1,"dome",PanelState)
OM@DR<-getminmax(1,"DR",PanelState)
