OM1<-OM2<-OM3<-OM4<-Bluefin_Tuna_EAtl_ICCAT
OM1@D<-OM2@D<-c(0.1,0.1) # Low depletion level
OM3@D<-OM4@D<-c(0.3,0.3) # High depletion level
nrecs<-testOM@maxage+testOM@nyears+testOM@proyears-1
RecHigh<-RecLow<-array(trlnorm(testOM@nsim*nrecs,1,0.3),c(testOM@nsim,nrecs))
Last40yrs<-nrecs-(39:0)
RecLow[,Last40yrs]<-RecLow[,Last40yrs]/2 # half recruitment strength after 10 years (last 40 years) of projection
OM1@cpars$Perr_y<-OM3@cpars$Perr_y<-RecHigh
OM2@cpars$Perr_y<-OM4@cpars$Perr_y<-RecLow
# --- Define index-based MPs -----
ITargMP<-function(x,Data,BMSY_B0=0.4,MaxChg=10,yrsmth=3){
oldind<-mean(Data@Ind[x,1:yrsmth])
curind<-mean(Data@Ind[x,length(Data@Ind[x,])-((yrsmth-1):0)])
curlev<-curind/oldind
oldTAC<-Data@MPrec[x]
newTAC<-curlev/BMSY_B0*oldTAC
LB<-oldTAC*(1-MaxChg/100)
UB<-oldTAC*(1+MaxChg/100)
if(newTAC<LB) newTAC<-LB
if(newTAC>UB) newTAC<-UB
Rec=new('Rec')
Rec@TAC<-newTAC
Rec
}
ConstUMP<-function(x,Data,Utarg=0.2,q=1e-04,yrsmth=3,MaxChg=10){
curind<-mean(Data@Ind[x,length(Data@Ind[x,])-((yrsmth-1):0)])
curB<-curind/q
newTAC<-curB*Utarg
oldTAC<-Data@MPrec[x]
LB<-oldTAC*(1-MaxChg/100)
UB<-oldTAC*(1+MaxChg/100)
if(newTAC<LB) newTAC<-LB
if(newTAC>UB) newTAC<-UB
Rec=new('Rec')
Rec@TAC<-newTAC
Rec
}
# Index target MPs
IT_40_20<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.4,MaxChg=20)
IT_40_10<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.4,MaxChg=10)
IT_40_5<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.4,MaxChg=5)
IT_30_20<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.3,MaxChg=20)
IT_30_10<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.3,MaxChg=10)
IT_30_5<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.3,MaxChg=5)
# Constant exploitation rate MPs
UT_30<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.3)
UT_25<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.25)
UT_20<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.2)
UT_15<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.15)
UT_10<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.1)
UT_5<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.05)
# State Space Surplus production model-based MPs
SPSS_MSY<-function (x, Data, reps = 1) {
dependencies <- "Data@Cat, Data@Ind"
do_Assessment <- SP_SS(x = x, Data = Data,start = list(dep = 0.875, sigma = 0.1, tau = 0.1))
Rec <- HCR_MSY(Assessment = do_Assessment, reps = reps)
Rec@Misc <- MSEtool:::Assess_diagnostic(x, Data, do_Assessment, include_assessment = FALSE)
return(Rec)
}
SPSS_4010<-function (x, Data, reps = 1){
dependencies <- "Data@Cat, Data@Ind"
do_Assessment <- SP_SS(x = x, Data = Data,start = list(dep = 0.875, sigma = 0.1, tau = 0.1))
Rec <- HCR_MSY(Assessment = do_Assessment, reps = reps)
Rec@Misc <- MSEtool:::Assess_diagnostic(x, Data, do_Assessment, include_assessment = FALSE)
return(Rec)
}
DD_4010<-DD4010 # rename existing MP
DD_MSY<-DD
# Assign correct classes to MPs
class(IT_40_20)<-class(IT_40_10)<-class(IT_40_5)<-class(IT_30_20)<-class(IT_30_10)<-class(IT_30_5)<-
class(UT_30)<-class(UT_25)<-class(UT_20)<-class(UT_15)<-class(UT_10)<-class(UT_5)<-
class(SPSS_MSY)<-class(SPSS_4010)<-class(DD_MSY)<-class(DD_4010)<-"MP"
MPs=c("IT_40_20","IT_40_10","IT_40_5","IT_30_20","IT_30_10","IT_30_5",
"UT_30","UT_25","UT_20","UT_15","UT_10","UT_5",
"SP_MSY","SP_4010","SPSS_MSY","SPSS_4010",
"DD_MSY","DD_4010","DDSS_MSY","DDSS_4010")
testMSE1<-runMSE(OM1,MPs=MPs)
testMSE2<-runMSE(OM2,MPs=MPs)
testMSE3<-runMSE(OM3,MPs=MPs)
testMSE4<-runMSE(OM4,MPs=MPs)
OM1<-OM2<-OM3<-OM4<-Bluefin_Tuna_EAtl_ICCAT
OM1@D<-OM2@D<-c(0.1,0.1) # Low depletion level
OM3@D<-OM4@D<-c(0.3,0.3) # High depletion level
nrecs<-OM1@maxage+OM1@nyears+OM1@proyears-1
RecHigh<-RecLow<-array(trlnorm(OM1@nsim*nrecs,1,0.3),c(OM1@nsim,nrecs))
Last40yrs<-nrecs-(39:0)
RecLow[,Last40yrs]<-RecLow[,Last40yrs]/2 # half recruitment strength after 10 years (last 40 years) of projection
OM1@cpars$Perr_y<-OM3@cpars$Perr_y<-RecHigh
OM2@cpars$Perr_y<-OM4@cpars$Perr_y<-RecLow
# --- Define index-based MPs -----
ITargMP<-function(x,Data,BMSY_B0=0.4,MaxChg=10,yrsmth=3){
oldind<-mean(Data@Ind[x,1:yrsmth])
curind<-mean(Data@Ind[x,length(Data@Ind[x,])-((yrsmth-1):0)])
curlev<-curind/oldind
oldTAC<-Data@MPrec[x]
newTAC<-curlev/BMSY_B0*oldTAC
LB<-oldTAC*(1-MaxChg/100)
UB<-oldTAC*(1+MaxChg/100)
if(newTAC<LB) newTAC<-LB
if(newTAC>UB) newTAC<-UB
Rec=new('Rec')
Rec@TAC<-newTAC
Rec
}
ConstUMP<-function(x,Data,Utarg=0.2,q=1e-04,yrsmth=3,MaxChg=10){
curind<-mean(Data@Ind[x,length(Data@Ind[x,])-((yrsmth-1):0)])
curB<-curind/q
newTAC<-curB*Utarg
oldTAC<-Data@MPrec[x]
LB<-oldTAC*(1-MaxChg/100)
UB<-oldTAC*(1+MaxChg/100)
if(newTAC<LB) newTAC<-LB
if(newTAC>UB) newTAC<-UB
Rec=new('Rec')
Rec@TAC<-newTAC
Rec
}
# Index target MPs
IT_40_20<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.4,MaxChg=20)
IT_40_10<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.4,MaxChg=10)
IT_40_5<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.4,MaxChg=5)
IT_30_20<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.3,MaxChg=20)
IT_30_10<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.3,MaxChg=10)
IT_30_5<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.3,MaxChg=5)
# Constant exploitation rate MPs
UT_30<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.3)
UT_25<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.25)
UT_20<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.2)
UT_15<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.15)
UT_10<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.1)
UT_5<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.05)
# State Space Surplus production model-based MPs
SPSS_MSY<-function (x, Data, reps = 1) {
dependencies <- "Data@Cat, Data@Ind"
do_Assessment <- SP_SS(x = x, Data = Data,start = list(dep = 0.875, sigma = 0.1, tau = 0.1))
Rec <- HCR_MSY(Assessment = do_Assessment, reps = reps)
Rec@Misc <- MSEtool:::Assess_diagnostic(x, Data, do_Assessment, include_assessment = FALSE)
return(Rec)
}
SPSS_4010<-function (x, Data, reps = 1){
dependencies <- "Data@Cat, Data@Ind"
do_Assessment <- SP_SS(x = x, Data = Data,start = list(dep = 0.875, sigma = 0.1, tau = 0.1))
Rec <- HCR_MSY(Assessment = do_Assessment, reps = reps)
Rec@Misc <- MSEtool:::Assess_diagnostic(x, Data, do_Assessment, include_assessment = FALSE)
return(Rec)
}
DD_4010<-DD4010 # rename existing MP
DD_MSY<-DD
# Assign correct classes to MPs
class(IT_40_20)<-class(IT_40_10)<-class(IT_40_5)<-class(IT_30_20)<-class(IT_30_10)<-class(IT_30_5)<-
class(UT_30)<-class(UT_25)<-class(UT_20)<-class(UT_15)<-class(UT_10)<-class(UT_5)<-
class(SPSS_MSY)<-class(SPSS_4010)<-class(DD_MSY)<-class(DD_4010)<-"MP"
MPs=c("IT_40_20","IT_40_10","IT_40_5","IT_30_20","IT_30_10","IT_30_5",
"UT_30","UT_25","UT_20","UT_15","UT_10","UT_5",
"SP_MSY","SP_4010","SPSS_MSY","SPSS_4010",
"DD_MSY","DD_4010","DDSS_MSY","DDSS_4010")
testMSE1<-runMSE(OM1,MPs=MPs)
testMSE2<-runMSE(OM2,MPs=MPs)
testMSE3<-runMSE(OM3,MPs=MPs)
testMSE4<-runMSE(OM4,MPs=MPs)
setup()
OM1<-OM2<-OM3<-OM4<-Bluefin_Tuna_EAtl_ICCAT
OM1@D<-OM2@D<-c(0.1,0.1) # Low depletion level
OM3@D<-OM4@D<-c(0.3,0.3) # High depletion level
nrecs<-OM1@maxage+OM1@nyears+OM1@proyears-1
RecHigh<-RecLow<-array(trlnorm(OM1@nsim*nrecs,1,0.3),c(OM1@nsim,nrecs))
Last40yrs<-nrecs-(39:0)
RecLow[,Last40yrs]<-RecLow[,Last40yrs]/2 # half recruitment strength after 10 years (last 40 years) of projection
OM1@cpars$Perr_y<-OM3@cpars$Perr_y<-RecHigh
OM2@cpars$Perr_y<-OM4@cpars$Perr_y<-RecLow
# --- Define index-based MPs -----
ITargMP<-function(x,Data,BMSY_B0=0.4,MaxChg=10,yrsmth=3){
oldind<-mean(Data@Ind[x,1:yrsmth])
curind<-mean(Data@Ind[x,length(Data@Ind[x,])-((yrsmth-1):0)])
curlev<-curind/oldind
oldTAC<-Data@MPrec[x]
newTAC<-curlev/BMSY_B0*oldTAC
LB<-oldTAC*(1-MaxChg/100)
UB<-oldTAC*(1+MaxChg/100)
if(newTAC<LB) newTAC<-LB
if(newTAC>UB) newTAC<-UB
Rec=new('Rec')
Rec@TAC<-newTAC
Rec
}
ConstUMP<-function(x,Data,Utarg=0.2,q=1e-04,yrsmth=3,MaxChg=10){
curind<-mean(Data@Ind[x,length(Data@Ind[x,])-((yrsmth-1):0)])
curB<-curind/q
newTAC<-curB*Utarg
oldTAC<-Data@MPrec[x]
LB<-oldTAC*(1-MaxChg/100)
UB<-oldTAC*(1+MaxChg/100)
if(newTAC<LB) newTAC<-LB
if(newTAC>UB) newTAC<-UB
Rec=new('Rec')
Rec@TAC<-newTAC
Rec
}
# Index target MPs
IT_40_20<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.4,MaxChg=20)
IT_40_10<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.4,MaxChg=10)
IT_40_5<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.4,MaxChg=5)
IT_30_20<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.3,MaxChg=20)
IT_30_10<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.3,MaxChg=10)
IT_30_5<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.3,MaxChg=5)
# Constant exploitation rate MPs
UT_30<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.3)
UT_25<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.25)
UT_20<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.2)
UT_15<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.15)
UT_10<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.1)
UT_5<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.05)
# State Space Surplus production model-based MPs
SPSS_MSY<-function (x, Data, reps = 1) {
dependencies <- "Data@Cat, Data@Ind"
do_Assessment <- SP_SS(x = x, Data = Data,start = list(dep = 0.875, sigma = 0.1, tau = 0.1))
Rec <- HCR_MSY(Assessment = do_Assessment, reps = reps)
Rec@Misc <- MSEtool:::Assess_diagnostic(x, Data, do_Assessment, include_assessment = FALSE)
return(Rec)
}
SPSS_4010<-function (x, Data, reps = 1){
dependencies <- "Data@Cat, Data@Ind"
do_Assessment <- SP_SS(x = x, Data = Data,start = list(dep = 0.875, sigma = 0.1, tau = 0.1))
Rec <- HCR_MSY(Assessment = do_Assessment, reps = reps)
Rec@Misc <- MSEtool:::Assess_diagnostic(x, Data, do_Assessment, include_assessment = FALSE)
return(Rec)
}
DD_4010<-DD4010 # rename existing MP
DD_MSY<-DD
# Assign correct classes to MPs
class(IT_40_20)<-class(IT_40_10)<-class(IT_40_5)<-class(IT_30_20)<-class(IT_30_10)<-class(IT_30_5)<-
class(UT_30)<-class(UT_25)<-class(UT_20)<-class(UT_15)<-class(UT_10)<-class(UT_5)<-
class(SPSS_MSY)<-class(SPSS_4010)<-class(DD_MSY)<-class(DD_4010)<-"MP"
MPs=c("IT_40_20","IT_40_10","IT_40_5","IT_30_20","IT_30_10","IT_30_5",
"UT_30","UT_25","UT_20","UT_15","UT_10","UT_5",
"SP_MSY","SP_4010","SPSS_MSY","SPSS_4010",
"DD_MSY","DD_4010","DDSS_MSY","DDSS_4010")
testMSE1<-runMSE(OM1,MPs=MPs)
testMSE2<-runMSE(OM2,MPs=MPs)
testMSE3<-runMSE(OM3,MPs=MPs)
testMSE4<-runMSE(OM4,MPs=MPs)
testMSE1<-runMSE(OM1,MPs=MPs,parallel=TRUE)
testMSE2<-runMSE(OM2,MPs=MPs,parallel=TRUE)
testMSE3<-runMSE(OM3,MPs=MPs,parallel=TRUE)
testMSE4<-runMSE(OM4,MPs=MPs,parallel=TRUE)
library(MSEtool)
library(DLMtool)
DLMextra()
library(DLMextra)
library(cowplot)
setup()
library(MSEtool)
library(DLMtool)
library(DLMextra)
library(cowplot)
setup()
library(DLMtool)
setup()
library(MSEtool)
library(DLMtool)
#DLMextra()
library(DLMextra)
library(cowplot)
setup()
library(MERA)
source("C:/GitHub/MERA/inst/shiny_apps/MERA/Source/OM/Scoping.R")
source("C:/GitHub/MERA/inst/shiny_apps/MERA/Source/Data/Data_trim.R",local=TRUE)
setwd("C:/Users/tcar_/Dropbox/MERA prototyping/Revised OM_Scoping")
OM<-readRDS("Lutjanus_malaba.OM")
dat<-new('Data',"malabaricus_input_adrian.csv")
dat2<-readRDS("YFTsimdata.Data")
codes<-getCodes(dat2,maxtest=6)
OM<-readRDS("Tiger_flathead.OM")
dat<-new('Data',"Tiger_flathead_data.csv")
codes<-getCodes(dat,maxtest=6)
dat_test<-Data_trimer(dat)
dat_test
dat_ind<-dat
dat<-dat_test
codes<-getCodes(dat,maxtest=3)
ncode<-length(codes)
for(cc in 1:ncode){
Fit[[cc]]<-GetDep(OM,dat,code=codes[cc],cores=4)
Est[[cc]]<-Fit[[cc]]@OM@cpars$D[Fit[[cc]]@conv]
if(sum(Fit[[cc]]@conv)==0)print(paste(cc,codes[cc],"Did not return depletion"))
}
library(MERA)
library(MSEtool)
library(DLMtool)
dat<-new('Data',"Tiger_flathead_data.csv")
codes<-getCodes(dat,maxtest=3)
dat_test<-Data_trimer(dat)
dat_ind<-dat
dat<-dat_test
ncode<-length(codes)
Est<-Sim<-Fit<-list()
setup()
for(cc in 1:ncode){
Fit[[cc]]<-GetDep(OM,dat,code=codes[cc],cores=4)
Est[[cc]]<-Fit[[cc]]@OM@cpars$D[Fit[[cc]]@conv]
if(sum(Fit[[cc]]@conv)==0)print(paste(cc,codes[cc],"Did not return depletion"))
}
library(MERA)
library(MSEtool)
library(DLMtool)
source("C:/GitHub/MERA/inst/shiny_apps/MERA/Source/OM/Scoping.R")
source("C:/GitHub/MERA/inst/shiny_apps/MERA/Source/Data/Data_trim.R",local=TRUE)
setwd("C:/Users/tcar_/Dropbox/MERA prototyping/Revised OM_Scoping")
OM<-readRDS("Tiger_flathead.OM")
dat<-new('Data',"Tiger_flathead_data.csv")
codes<-getCodes(dat,maxtest=3)
dat_test<-Data_trimer(dat)
dat_ind<-dat
dat<-dat_test
ncode<-length(codes)
Est<-Sim<-Fit<-list()
setup()
for(cc in 1:ncode){
Fit[[cc]]<-GetDep(OM,dat,code=codes[cc],cores=4)
Est[[cc]]<-Fit[[cc]]@OM@cpars$D[Fit[[cc]]@conv]
if(sum(Fit[[cc]]@conv)==0)print(paste(cc,codes[cc],"Did not return depletion"))
}
shiny::runApp('C:/GitHub/MERA/inst/shiny_apps/MERA')
shiny::runApp('inst/shiny_apps/MERA')
library(MSEtool)
library(DLMextra)
library(mvtnorm)
source("C:/GitHub/MERA/inst/shiny_apps/MERA/Source/OM/makeOM.r")
source("C:/GitHub/MERA/inst/shiny_apps/MERA/Source/OM/Scoping.r")
source("C:/Users/tcarruth/Documents/GitHub/MERA/inst/shiny_apps/MERA/Source/OM/makeOM.r")
source("C:/Users/tcarruth/Documents/GitHub/MERA/inst/shiny_apps/MERA/Source/OM/Scoping.r")
simOM<-testOM
simOM@nsim<-16
simOM@proyears=5
simOM@interval=10
MSEout<-runMSE(simOM,MPs="curE",PPD=TRUE)
TrueDep<-MSEout@OM$D[1]
dat<-MSEout@Misc[[4]][[1]]
Effort<-dat@Cat/dat@Ind
dat@Effort<-Effort/apply(Effort,1,mean) # standardized
OM<-trimOM(testOM,16)
codes<-getCodes(dat,maxtest=3)
ncode<-length(codes)
Est<-Sim<-Fit<-list()
codes
OM<-readRDS("Lutjanus_malaba.OM")
dat<-new('Data',"malabaricus_input_tom.csv")
#dat2<-readRDS("YFTsimdata.Data")
codes<-getCodes(dat,maxtest=6)
# Laptop
source("C:/GitHub/MERA/inst/shiny_apps/MERA/Source/OM/Scoping.R")
source("C:/GitHub/MERA/inst/shiny_apps/MERA/Source/OM/makeOM.R")
source("C:/GitHub/MERA/inst/shiny_apps/MERA/Source/Data/Data_trim.R",local=TRUE)
setwd("C:/Users/tcar_/Dropbox/MERA/MERA prototyping/Revised OM_Scoping")
OM<-readRDS("Lutjanus_malaba.OM")
dat<-new('Data',"malabaricus_input_tom.csv")
#dat2<-readRDS("YFTsimdata.Data")
codes<-getCodes(dat,maxtest=6)
codes
temp<-GetDep(OM,dat,code=codes[1],cores=4)
dat
dat@CAL;
dim(dat@CAL)
dim(dat$Cat)
slotNames(dat)
dat$Cat
dat@Cat
dat@Effort
dat@Effort[]<-1
temp<-GetDep(OM,dat,code=codes[1],cores=4)
plot(temp)
temp
outlist<-DataStrip(dat,OM,code=codes[1],simno=1)
outlist
OM@Linf
dat@CAL_bins
dat@vbLinf
OM@cpars$Linf
OM@cpars$K
OM@cpars$M
dat@vbLinf
!is.null(dat@vbLinf)
OM@cpars$Linf
if(!is.null(dat@vbLinf)&!is.na(dat@vbLinf)) OM@cpars$Linf[]<-dat@vbLinf
OM@cpars$Linf
dat$vbK
dat@vbK
OM@cpars$K
dat@vbK / mean(OM@cpars$K)
mean(OM@cpars$K)
dat@vbK / mean(OM@cpars$K)
OM@cpars$t0
dat@vbt0
OM@t0
rep(dat@vbt0,2)
dat@Mort
OM@M2
OM@cpars$M
dat@Mort / mean(OM@cpars$M)
OM@cpars$L50
dat@L50
runApp('C:/GitHub/MERA/inst/shiny_apps/MERA')
OM@cpars$Linf
avail('MP')
SP_MSY
SP
setwd("C:/Users/tcar_/Dropbox/abft-mse/data/ICCAT_2020_1")
FI<-read.csv("FI_indices_compiled_OM2020Mar.csv")
CPUE<-read.csv("CPUE_indices compiled_OM2020Mar_with_lt.csv")
CPUE
FI
yrs<-2017:2019
CPUE<-CPUE[CPUE$Year%in%yrs,]
FI<-FI[FI$Year%in%yrs,]
CPUE
FI
all<-rbind(FI[,c(1,9)],
CPUE[,c(1,9)])
all
ind<-cbind(match(all$Name,nams),match(all$Year,yrs))
outmat<-matrix(0,nrow=ni,ncol=ny)
outmat[ind]<-
nams<-unique(all$Name)
ni<-length(nams)
ny<-length(yrs)
ind<-cbind(match(all$Name,nams),match(all$Year,yrs))
outmat<-matrix(0,nrow=ni,ncol=ny)
outmat[ind]<-1
outmat
row.names(outmat)<-nams
names(outmat<-yrs)
outmat
all<-rbind(FI[,c(1,9)],
CPUE[,c(1,9)])
nams<-unique(all$Name)
ni<-length(nams)
ny<-length(yrs)
ind<-cbind(match(all$Name,nams),match(all$Year,yrs))
outmat<-matrix(0,nrow=ni,ncol=ny)
outmat[ind]<-1
row.names(outmat)<-nams
outmat
names(outmat)<-yrs
outmat
nams<-unique(all$Name)
ni<-length(nams)
ny<-length(yrs)
ind<-cbind(match(all$Name,nams),match(all$Year,yrs))
outmat<-matrix(0,nrow=ni,ncol=ny)
outmat[ind]<-1
row.names(outmat)<-nams
col.names(outmat)<-yrs
?row.names
colnames(outmat)<-yrs
outmat
rownames(outmat)<-nams
outmat
write.csv(outmat,file="Indices 2017-2019.csv",sep=",")
write.csv(outmat,file="Indices 2017-2019.csv")
write.csv(outmat,file="C:/Users/tcar_/Dropbox/BFT MSE/Communications/Apr 20 updates Index years - AC for recent years - TS excerpt/Indices 2017-2019.csv")
setwd("C:/Users/tcar_/Dropbox/abft-mse/data/ICCAT_2020_1")
FI<-read.csv("FI_indices_compiled_OM2020Mar.csv")
CPUE<-read.csv("CPUE_indices compiled_OM2020Mar_with_lt.csv")
yrs<-2017:2019
CPUE<-CPUE[CPUE$Year%in%yrs,]
FI<-FI[FI$Year%in%yrs,]
all<-rbind(FI[,c(1,7,9)],
CPUE[,c(1,6,9)])
n
all
names(CP*E)
names(CPUE)
setwd("C:/Users/tcar_/Dropbox/abft-mse/data/ICCAT_2020_1")
FI<-read.csv("FI_indices_compiled_OM2020Mar.csv")
names(FI)[7]<-"Index"
CPUE<-read.csv("CPUE_indices compiled_OM2020Mar_with_lt.csv")
yrs<-2017:2019
CPUE<-CPUE[CPUE$Year%in%yrs,]
FI<-FI[FI$Year%in%yrs,]
all<-rbind(FI[,c(1,7,9)],
CPUE[,c(1,6,9)])
CPUE[,c(1,6,9)])
nams<-unique(all$Name)
ni<-length(nams)
ny<-length(yrs)
ind<-cbind(match(all$Name,nams),match(all$Year,yrs))
outmat<-matrix(0,nrow=ni,ncol=ny)
outmat[ind]<-all1
rownames(outmat)<-nams
colnames(outmat)<-yrs
outmat
ind<-cbind(match(all$Name,nams),match(all$Year,yrs))
outmat<-matrix(0,nrow=ni,ncol=ny)
outmat[ind]<-all$Index
rownames(outmat)<-nams
colnames(outmat)<-yrs
outmat
write.csv(outmat,file="C:/Users/tcar_/Dropbox/BFT MSE/Communications/Apr 20 updates Index years - AC for recent years - TS excerpt/Indices 2017-2019.csv")
Indices
library(ABTMSE)
loadABT()
Indices
Obs@MPind
Good_Obs@MPind
class('dat')
avail('dat')
avail('data')
dset_example_East
dim(dset_example_East$Iobs)
Indices
dset_example_East$Iobs[,12,53:55]
dset_example_East$Iobs[,7,53:55]
