hh<-0.45
D<-seq(0,1,length.out=ny)
murec<-(0.8*hh*D)/(0.2*(1-hh)+(hh-0.2)*D)
muR_max<--0.5*sigR_max^2
muR_min<--0.5*sigR_min^2
ld_max<-rnorm(ny,muR_max,sigR_max)
ld_min<-rnorm(ny,muR_min,sigR_min)
rd_max<-exp(ld_max)
rd_min<-exp(ld_min)
recs_max<-rd_max*murec
recs_min<-rd_min*murec
plot(D,murec,ylim=c(0,quantile(c(rd_max,rd_min),0.95)),type="l",lwd=2,xlab="",ylab="",col=mucol,axes=F)
axis(1)
axis(2)
mtext("SSB relative to unfished",1,line=2.5)
mtext("Recruitment relative to unfished",2,line=2.5)
points(D,recs_max,col=maxcol,pch=pch)
points(D,recs_min,col=mincol,pch=pch)
legend('topleft',legend=c("Highest","Lowest","Mean"),text.col=c(fcol,icol,"black"),text.font=2,bty="n")
ylim<-c(-1,1)*max(abs(range(c(ld_max,ld_min))))
plot(c(0.5,ny),ylim,col='white',axes=F,xlab="",ylab="")
abline(h=0,lwd=2,col=mucol)
points(ld_max[yord]-muR_max,col=maxcol,pch=pch)
points(ld_min[yord]-muR_min,col=mincol,pch=pch)
axis(2)
axis(1,c(-100,100),c(-100,100))
mtext("Year",1,line=2.1)
mtext("Recruitment deviation",2,line=2)
mtext("Example stock-recruitment curve",3,line=0.8,at=0.2)
d_max<-density(rnorm(10000,muR_max,sigR_max))
d_min<-density(rnorm(10000,muR_min,sigR_min))
scale<-max(d_min$y)
plot(c(0,1),ylim,axes=F,xlab="",ylab="",col="white")
polygon(x=d_max$y/scale,y=d_max$x-muR_max,col=maxcol,border=maxcol)
polygon(x=d_min$y/scale,y=d_min$x-muR_min,col=mincol,border=mincol)
legend('topright',legend=paste0(c(sigR_max,sigR_min)*200,"%"),text.font=2,text.col=c(fcol,icol),bty='n')
}else{
plot(c(0,3.5),c(0,1),col="white",axes=FALSE,xlab="",ylab="")
text(1.75,0.5,"< Unspecified >",col="grey")
#text(1.75,0.25,input$DM,col="grey")
#text(1.75,0.75,DM_nams,col="grey")
}
}
fishgrid2<-function(nfish,fcol="red",mpacol="green"){
nfish2<-floor(nfish/5)
xlim<-c(0,1)
ylim<-c(0,1)
xl<-seq(xlim[1],xlim[2],length.out=6)[2:5]
yl<-seq(ylim[1],ylim[2],length.out=7)[2:6]
ind<-expand.grid(1:4,1:5)
cols<-rep(fcol,20)
cols[0:nfish2]<-mpacol
for(i in 1:20)fishy(xl[ind[i,1]],yl[ind[i,2]],scale=0.09,col=cols[i],border=cols[i])
}
plotAh <- function(dummy=1){
A_nams<-unlist(A_list)#c("A_1", "A_1_5", "A_5_10", "A_10_20", "A_20_30", "A_30_40", "A_40_50")
cond<-A_nams%in%input$Ah
if(sum(cond)>0){
Amax<-max(A_maxes[cond])*100
Amin<-min(A_mins[cond])*100
par(mfrow=c(1,2),mai=c(0.01,0.2,0.01,0.01), omi=c(0.4,0.01,0.55,0.01), cex.main = 1.5, cex.lab=1.35 )
plot(c(0,1),c(0,1),col="white",axes=F)
fishgrid2(Amin,fcol=icol,mpacol=fcol)
mtext("Smallest",3,line=0.4)
plot(c(0,1),c(0,1),col="white",axes=F)
fishgrid2(Amax,fcol=icol,mpacol=fcol)
mtext("Largest",3,line=0.4)
}else{
plot(c(0,3.5),c(0,1),col="white",axes=FALSE,xlab="",ylab="")
text(1.75,0.5,"< Unspecified >",col="grey")
}
}
plotVh <- function(dummy=1){
V_nams<-unlist(V_list)#c("P_1", "P_1_5", "P_5_10", "P_10_20", "P_20")
cond<-V_nams%in%input$Vh
if(sum(cond)>0){
Vmax<-max(V_maxes[cond])
Vmin<-min(V_mins[cond])
par(mfrow=c(1,2),mai=c(0.01,0.01,0.01,0.01), omi=c(0.01,0.01,0.5,0.01), cex.main = 1.5, cex.lab=1.35 )
plot(c(0,1),c(0,1),axes=F,col="white")
text(0.25,0.25,"MPA",cex=2.7,font=2,col="grey78")
fishgrid3(Vmin,fcol=icol,mpacol=fcol)
polygon(c(0.02,0.5,0.5,0.02),c(0.02,0.02,0.5,0.5),col=NA,border='black')
mtext("Lowest mixing",3,line=0.4)
plot(c(0,1),c(0,1),axes=F,col="white")
text(0.25,0.25,"MPA",cex=2.7,font=2,col="grey78")
fishgrid3(Vmax,fcol=icol,mpacol=fcol)
mtext("Highest mixing",3,line=0.4)
polygon(c(0.02,0.5,0.5,0.02),c(0.02,0.02,0.5,0.5),col=NA, border='black')
}else{
plot(c(0,3.5),c(0,1),col="white",axes=FALSE,xlab="",ylab="")
text(1.75,0.5,"< Unspecified >",col="grey")
}
}
plotA <- function(dummy=1){
A_nams<-unlist(A_list)#c("A_1", "A_1_5", "A_5_10", "A_10_20", "A_20_30", "A_30_40", "A_40_50")
cond<-A_nams%in%input$A
if(sum(cond)>0){
Amax<-max(A_maxes[cond])*100
Amin<-min(A_mins[cond])*100
par(mfrow=c(1,2),mai=c(0.01,0.2,0.01,0.01), omi=c(0.4,0.01,0.55,0.01), cex.main = 1.5, cex.lab=1.35 )
plot(c(0,1),c(0,1),col="white",axes=F)
fishgrid2(Amin,fcol=icol,mpacol=fcol)
mtext("Smallest",3,line=0.4)
plot(c(0,1),c(0,1),col="white",axes=F)
fishgrid2(Amax,fcol=icol,mpacol=fcol)
mtext("Largest",3,line=0.4)
}else{
plot(c(0,3.5),c(0,1),col="white",axes=FALSE,xlab="",ylab="")
text(1.75,0.5,"< Unspecified >",col="grey")
}
}
fishgrid3<-function(Prob,fcol="red",mpacol="green"){
nfish<-floor(Prob*100)
xlim<-c(0,1)
ylim<-c(0,1)
xl<-seq(xlim[1],xlim[2],length.out=22)[2:21]
yl<-seq(ylim[1],ylim[2],length.out=22)[2:21]
ind<-expand.grid(1:20,1:20)
cols<-array(fcol,c(20,20))
cols[1:10,1:10]<-mpacol
indmpa<-as.matrix(expand.grid(1:10,1:10))
inds1<-indmpa[sample(1:100,nfish),]
cols[inds1]<-fcol
indf<-as.matrix(rbind(expand.grid(11:20,1:20),expand.grid(1:10,11:20)))
inds2<-indf[sample(1:300,nfish),]
cols[inds2]<-mpacol
indall<-as.matrix(expand.grid(1:20,1:20))
for(i in 1:400)fishy(xl[indall[i,1]],yl[indall[i,2]],scale=0.035,col=cols[indall[i,1],indall[i,2]],border=cols[indall[i,1],indall[i,2]])
}
plotV <- function(dummy=1){
V_nams<-unlist(V_list)#c("P_1", "P_1_5", "P_5_10", "P_10_20", "P_20")
cond<-V_nams%in%input$V
if(sum(cond)>0){
Vmax<-max(V_maxes[cond])
Vmin<-min(V_mins[cond])
par(mfrow=c(1,2),mai=c(0.01,0.01,0.01,0.01), omi=c(0.01,0.01,0.5,0.01), cex.main = 1.5, cex.lab=1.35 )
plot(c(0,1),c(0,1),axes=F,col="white")
text(0.25,0.25,"MPA",cex=2.7,font=2,col="grey78")
fishgrid3(Vmin,fcol=icol,mpacol=fcol)
polygon(c(0.02,0.5,0.5,0.02),c(0.02,0.02,0.5,0.5),col=NA,border='black')
mtext("Lowest mixing",3,line=0.4)
plot(c(0,1),c(0,1),axes=F,col="white")
text(0.25,0.25,"MPA",cex=2.7,font=2,col="grey78")
fishgrid3(Vmax,fcol=icol,mpacol=fcol)
mtext("Highest mixing",3,line=0.4)
polygon(c(0.02,0.5,0.5,0.02),c(0.02,0.02,0.5,0.5),col=NA, border='black')
}else{
plot(c(0,3.5),c(0,1),col="white",axes=FALSE,xlab="",ylab="")
text(1.75,0.5,"< Unspecified >",col="grey")
}
}
plotDh <- function(dummy=1){
D_nams<-unlist(D_list)#c("D_10", "D_10_20","D_20_30","D_30_60","D_60_80","D_80")
cond<-D_nams%in%input$D
Dh_nams<-unlist(Dh_list)#c("D_10", "D_10_20","D_20_30","D_30_60","D_60_80","D_80")
condh<-Dh_nams%in%input$Dh
suppressWarnings({ny<-as.numeric(input$nyears)})
if(is.na(ny))ny<-68
if(sum(cond)>0){
par(mfrow=c(1,2),mai=c(0.3,0.5,0.01,0.01), omi=c(0.4,0.18,0.55,0.1),cex.main = 1.5, cex.lab=1.35 )
D_max<-max(D_maxes[cond])
D_min<-min(D_mins[cond])
Dh_max<-max(Dh_maxes[condh])
Dh_min<-min(Dh_mins[condh])
set.seed(1)
ts1<-(2+(cos((1:ny)/(ny/16)))/2)*exp(rnorm(ny,0,0.2))
ts1<-ts1/mean(ts1[1:5])
ts1<-ts1*seq(1/ts1[1],1/ts1[ny],length.out=ny)
ts2<-(2+(cos(((ny)+(1:ny))/(ny/16))/3))*exp(rnorm(ny,0,0.1))
ts2<-ts2/mean(ts2[1:5])
ts2<-ts2*seq(1/ts2[1],1/ts2[ny],length.out=ny)
# plot TS1
yrs<-Current_Year-(ny:1)
ny<-length(yrs)
startys<-floor(ny/2)
Dmaxs1<-c(seq(Dh_max,1-(1-D_max)/1.5,length.out=ny-startys),seq(1-(1-D_max)/1.5,D_max,length.out=startys))
Dmins1<-c(seq(Dh_min,1-(1-D_min)/1.5,length.out=ny-startys),seq(1-(1-D_min)/1.5,D_min,length.out=startys))
Dmaxs2<-c(seq(Dh_max,1-(1-D_max)/4,length.out=startys),seq(1-(1-D_max)/4,D_max,length.out=ny-startys))
Dmins2<-c(seq(Dh_min,1-(1-D_min)/4,length.out=startys),seq(1-(1-D_min)/4,D_min,length.out=ny-startys))
UB<-Dmaxs1*ts1
LB<-Dmins1*ts1
plot(yrs[c(1,ny)],c(0,1.3),col="white",xlab="",ylab="")
abline(h=c(D_max,D_min),lty=2,col=icol)
abline(h=1)
polygon(c(yrs,yrs[ny:1]),c(LB,UB[ny:1]),border=fcol,col=fcol)
mtext("Example 1",3,line=0.8)
# plot TS2
yrs<-Current_Year-(ny:1)
ny<-length(yrs)
Dmaxs<-seq(1,D_max,length.out=ny)
Dmins<-seq(1,D_min,length.out=ny)
UB<-Dmaxs2*ts2
LB<-Dmins2*ts2
plot(yrs[c(1,ny)],c(0,1.3),col="white",xlab="",ylab="")
abline(h=c(Dh_max,Dh_min),lty=2,col=icol)
abline(h=1)
polygon(c(yrs,yrs[ny:1]),c(LB,UB[ny:1]),border=fcol,col=fcol)
mtext("Example 2",3,line=0.8)
#text(mina+(maxa-mina)/2,0.95," Range max age ",col='orange')
#text(mina+(maxa-mina)/2,0.88,paste(round(mina,1), "-",round(maxa,1)),col='orange')
#text(mina+(maxa-mina)/2,0.81,paste(M_max, "> M >",M_min),col='orange')
mtext("Historical Year",1,line=1,outer=T)
mtext("Spawn. bio. relative to unfished",2,line=0,outer=T)
}else{
par(mar=c(3.5,3,0.01,0.01), cex.main = 1.5, cex.lab=1.35 )
plot(c(1,20),c(0,1),col="white",axes=FALSE,xlab="",ylab="")
text(10,0.5,"< unspecified >", col="grey")
}
}
getminmax<-function(panel,parameter,PanelState){
loc<-match(parameter,inputnames[[panel]])
mins<-get(paste0(parameter,"_mins"))
maxs<-get(paste0(parameter,"_maxes"))
cond<-unlist(PanelState[[panel]][loc])
range(mins[cond],maxs[cond])
}
OM<-LowSlopes(testOM)
OM@R0<-100000
OM@nsim<-nsim
OM@Linf<-c(100,100)
OM@L50<-NaN
OM@K<-NaN
OM@isRel<-"FALSE"
OM@Name<-input$Name
OM@Species<-input$Species
OM@Region<-input$Region
OM@Agency<-input$Agency
if(is.na(nyears)){
if(is.na(as.integer(input$nyears))){
OM@nyears<-68
}else{
OM@nyears<-as.integer(input$nyears)
}
}else{
OM@nyears<-nyears
}
nyears<-OM@nyears
OM@Source<-input$Author
OM@interval<-input$interval
OM@proyears<-proyears<-input$proyears
nyears
proyears
OM<-LowSlopes(testOM)
OM@R0<-100000
OM@nsim<-nsim
OM@Linf<-c(100,100)
OM@L50<-NaN
OM@K<-NaN
OM@isRel<-"FALSE"
OM@Name<-input$Name
OM@Species<-input$Species
OM@Region<-input$Region
OM@Agency<-input$Agency
if(is.na(nyears)){
if(is.na(as.integer(input$nyears))){
OM@nyears<-68
}else{
OM@nyears<-as.integer(input$nyears)
}
}else{
OM@nyears<-nyears
}
nyears<-OM@nyears
OM@Source<-input$Author
OM@interval<-input$interval
OM@proyears<-proyears<-50#input$proyears
OM@proyears
#save(OM,file="OM.Rdata")  # debug
loc<-match("Err",inputnames[[3]])                                                        # D1 -----------
cond<-as.vector(unlist(PanelState[[3]][loc]))
Dquality<-as.vector(unlist(Err_list)[cond])
if(Dquality=="Err_perf"){
temp<-new('OM',Albacore,Generic_Fleet,Perfect_Info,Perfect_Imp)
}else if(Dquality=="Err_good"){
temp<-new('OM',Albacore,Generic_Fleet,Precise_Unbiased,Perfect_Imp)
}else if(Dquality=="Err_mod"){
temp<-new('OM',Albacore,Generic_Fleet,Generic_obs,Perfect_Imp)
}else{
temp<-new('OM',Albacore,Generic_Fleet,Imprecise_Biased,Perfect_Imp)
}
OM<-Replace(OM,temp,Sub="Obs")
# ---- Fishery characteristics ---------------------------------------------------------------------------
OM@M<-getminmax(1,"M",PanelState)                                                        # F2 ----------
OM@L50<-getminmax(1,"LM",PanelState)                                                     # F9 ----------
if(is.na(maxage)){
OM@maxage=ceiling(-log(0.02)/min(OM@M))
}else{
OM@maxage=maxage
}
OM<-LH2OM(OM, dist='norm')
OM@K<-quantile(OM@cpars$K,c(0.05,0.95))
OM@L50<-quantile(OM@cpars$L50,c(0.05,0.95))
OM@L50_95<-c(10,10)
OM@Linf<-c(100,100)
OM@D<-getminmax(1,"D",PanelState)                                                        # F3 -----------
OM@h<-getminmax(1,"h",PanelState)                                                        # F4 -----------
# Ftrend and error                                                                       # F5 -----------
loc<-match("FP",inputnames[[1]])
cond<-(1:length(unlist(PanelState[[1]][loc])))[unlist(PanelState[[1]][loc])]
Ftype<<-sample(cond,nsim,replace=T)
M1sim<-M1s[Ftype]
M2sim<-M2s[Ftype]
sd1sim<-sd1s[Ftype]
sd2sim<-sd2s[Ftype]
h2sim<-h2s[Ftype]
locsim<-PanelState[[4]][[1]]
stmagsim<-PanelState[[4]][[2]]
Find<-array(NA,c(nsim,nyears))
#Ftrendfunc<-function(                 M1=0.2,M2=1.2,sd1=0.1,sd2=0.3,h2=2,ny=68,loc=1,start_mag=1,bm=F,plot=F){
for(i in 1:nsim)Find[i,]<-Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=locsim,start_mag=2-stmagsim,bm=F,plot=F)
# for(i in 1:nsim)Find[i,]<-Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=0.5,start_mag=2-0.5,bm=F,plot=F)
Esd<-getminmax(1,"F",PanelState)                                                         # F6 ----------
Esd_max<-Esd[2]
Esd_min<-Esd[1]
Esdrand<-runif(nsim,Esd_min,Esd_max)
Emu<-(-0.5*Esdrand^2)
Esdarray<-array(exp(rnorm(nsim*nyears,Emu,Esdrand)),c(nsim,nyears))
qhs<-getminmax(1,"qh",PanelState)
qssim<-1+runif(nsim,qhs[1],qhs[2])/100                                                   # F7 ----------
for(i in 1:nsim)Find[i,]<-Find[i,]*Esdarray[i,]* qssim[i]^((1:nyears)-(nyears/2))
# --- Future catchability ----------
OM@qinc<-getminmax(1,"q",PanelState)                                                     # F8 ----------
# --- Selectivity -----------------------
Sel50<-getminmax(1,"sel",PanelState)                                                     # F10 ----------
Sel50sim<-runif(nsim,Sel50[1],Sel50[2])
L5<-OM@cpars$Linf*Sel50sim*0.8
LFS<-OM@cpars$Linf*Sel50sim*1.2
cond<-LFS>0.95*OM@cpars$Linf
LFS[cond]<-0.95*OM@cpars$Linf[cond]
OM@Vmaxlen<-getminmax(1,"dome",PanelState)                                               # F11 ----------
# --- Discarding ------------------------
OM@DR<-getminmax(1,"DR",PanelState)                                                      # F12 ----------
OM@Fdisc<-getminmax(1,"PRM",PanelState)                                                  # F13 ----------
# --- Recruitment deviations ------------
OM@Perr<-getminmax(1,"sigR",PanelState)                                                  # F14 ----------
# --- MPAs ------------------------------
nareas<-3
Ahrng<-getminmax(1,"Ah",PanelState) # size / frac habitat area 3                         # F15 ----------
Vhrng<-getminmax(1,"Vh",PanelState) # prob staying in area 3                             # F16 ----------
Arng<-getminmax(1,"A",PanelState)   # size / frac habitat area 1                         # F17 ----------
Vrng<-getminmax(1,"V",PanelState)   # prob staying in area 3                             # F18 ----------
Ahsim<-runif(nsim,Ahrng[1],Ahrng[2])
Vhsim<-runif(nsim,Vhrng[1],Vhrng[2])
Asim<-runif(nsim,Arng[1],Arng[2])
Vsim<-runif(nsim,Vrng[1],Vrng[2])
ilogit<-function(x)log(x/(1-x))
logit<-function(x)exp(x)/(1+exp(x))
mov1<-mov2<-array(NA,c(nsim,2,2))
for(i in 1:nsim){
mov1[i,,]<-getmov2(i,Vsim,Asim)
mov2[i,,]<-getmov2(i,Vhsim,Ahsim)
}
V2<-apply(cbind(mov1[,2,2]-Vhsim, # staying in areas 2 and 3 minus staying in area 3
mov2[,2,2]-Vsim), # staying in areas 2 and 3 minus staying in area 1
1,min) # an overestimate of the prob_staying in area 2
Sz2<-1-(Ahsim+Asim)
Asize<-cbind(Asim,Sz2,Ahsim) # area 1 is Asim as future MPs close area 1
probs<-cbind(Vsim,V2,Vhsim)
# plot(Ahsim,Vhsim,type='l',xlim=c(0,0.9)); lines(Asim,Vsim,col="grey"); lines(Sz2,V2,col="red")
mov<-array(NA,c(nsim, maxage, nareas, nareas, nyears+proyears))
for(i in 1:nsim)mov[i,,,,]<-array(rep(makemov(fracs=Asize[i,], prob=probs[i,]),each=maxage),c(maxage,nareas,nareas,nyears+proyears))
OM@M
OM@M<-getminmax(1,"M",PanelState)
OM@M
runApp()
OM<-LowSlopes(testOM)
OM@R0<-100000
OM@nsim<-nsim
OM@Linf<-c(100,100)
OM@L50<-NaN
OM@K<-NaN
OM@isRel<-"FALSE"
OM@Name<-input$Name
OM@Species<-input$Species
OM@Region<-input$Region
OM@Agency<-input$Agency
if(is.na(nyears)){
if(is.na(as.integer(input$nyears))){
OM@nyears<-68
}else{
OM@nyears<-as.integer(input$nyears)
}
}else{
OM@nyears<-nyears
}
nyears<-OM@nyears
OM@Source<-input$Author
OM@interval<-input$interval
OM@proyears<-proyears<-50#input$proyears
#save(OM,file="OM.Rdata")  # debug
loc<-match("Err",inputnames[[3]])                                                        # D1 -----------
cond<-as.vector(unlist(PanelState[[3]][loc]))
Dquality<-as.vector(unlist(Err_list)[cond])
if(Dquality=="Err_perf"){
temp<-new('OM',Albacore,Generic_Fleet,Perfect_Info,Perfect_Imp)
}else if(Dquality=="Err_good"){
temp<-new('OM',Albacore,Generic_Fleet,Precise_Unbiased,Perfect_Imp)
}else if(Dquality=="Err_mod"){
temp<-new('OM',Albacore,Generic_Fleet,Generic_obs,Perfect_Imp)
}else{
temp<-new('OM',Albacore,Generic_Fleet,Imprecise_Biased,Perfect_Imp)
}
OM<-Replace(OM,temp,Sub="Obs")
# ---- Fishery characteristics ---------------------------------------------------------------------------
OM@M<-getminmax(1,"M",PanelState)                                                        # F2 ----------
OM@L50<-getminmax(1,"LM",PanelState)                                                     # F9 ----------
if(is.na(maxage)){
OM@maxage=ceiling(-log(0.02)/min(OM@M))
}else{
OM@maxage=maxage
}
OM<-LH2OM(OM, dist='norm')
OM@K<-quantile(OM@cpars$K,c(0.05,0.95))
OM@L50<-quantile(OM@cpars$L50,c(0.05,0.95))
OM@L50_95<-c(10,10)
OM@Linf<-c(100,100)
OM@D<-getminmax(1,"D",PanelState)                                                        # F3 -----------
OM@h<-getminmax(1,"h",PanelState)                                                        # F4 -----------
# Ftrend and error                                                                       # F5 -----------
loc<-match("FP",inputnames[[1]])
cond<-(1:length(unlist(PanelState[[1]][loc])))[unlist(PanelState[[1]][loc])]
Ftype<<-sample(cond,nsim,replace=T)
M1sim<-M1s[Ftype]
M2sim<-M2s[Ftype]
sd1sim<-sd1s[Ftype]
sd2sim<-sd2s[Ftype]
h2sim<-h2s[Ftype]
locsim<-PanelState[[4]][[1]]
stmagsim<-PanelState[[4]][[2]]
Find<-array(NA,c(nsim,nyears))
#Ftrendfunc<-function(                 M1=0.2,M2=1.2,sd1=0.1,sd2=0.3,h2=2,ny=68,loc=1,start_mag=1,bm=F,plot=F){
for(i in 1:nsim)Find[i,]<-Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=locsim,start_mag=2-stmagsim,bm=F,plot=F)
# for(i in 1:nsim)Find[i,]<-Ftrendfunc(M1=M1sim[i],M2=M2sim[i],sd1=sd1sim[i],sd2=sd2sim[i],h2=h2sim[i],ny=nyears,loc=0.5,start_mag=2-0.5,bm=F,plot=F)
Esd<-getminmax(1,"F",PanelState)                                                         # F6 ----------
Esd_max<-Esd[2]
Esd_min<-Esd[1]
Esdrand<-runif(nsim,Esd_min,Esd_max)
Emu<-(-0.5*Esdrand^2)
Esdarray<-array(exp(rnorm(nsim*nyears,Emu,Esdrand)),c(nsim,nyears))
qhs<-getminmax(1,"qh",PanelState)
qssim<-1+runif(nsim,qhs[1],qhs[2])/100                                                   # F7 ----------
for(i in 1:nsim)Find[i,]<-Find[i,]*Esdarray[i,]* qssim[i]^((1:nyears)-(nyears/2))
# --- Future catchability ----------
OM@qinc<-getminmax(1,"q",PanelState)                                                     # F8 ----------
# --- Selectivity -----------------------
Sel50<-getminmax(1,"sel",PanelState)                                                     # F10 ----------
Sel50sim<-runif(nsim,Sel50[1],Sel50[2])
L5<-OM@cpars$Linf*Sel50sim*0.8
LFS<-OM@cpars$Linf*Sel50sim*1.2
cond<-LFS>0.95*OM@cpars$Linf
LFS[cond]<-0.95*OM@cpars$Linf[cond]
OM@Vmaxlen<-getminmax(1,"dome",PanelState)                                               # F11 ----------
# --- Discarding ------------------------
OM@DR<-getminmax(1,"DR",PanelState)                                                      # F12 ----------
OM@Fdisc<-getminmax(1,"PRM",PanelState)                                                  # F13 ----------
# --- Recruitment deviations ------------
OM@Perr<-getminmax(1,"sigR",PanelState)                                                  # F14 ----------
# --- MPAs ------------------------------
nareas<-3
Ahrng<-getminmax(1,"Ah",PanelState) # size / frac habitat area 3                         # F15 ----------
Vhrng<-getminmax(1,"Vh",PanelState) # prob staying in area 3                             # F16 ----------
Arng<-getminmax(1,"A",PanelState)   # size / frac habitat area 1                         # F17 ----------
Vrng<-getminmax(1,"V",PanelState)   # prob staying in area 3                             # F18 ----------
Ahsim<-runif(nsim,Ahrng[1],Ahrng[2])
Vhsim<-runif(nsim,Vhrng[1],Vhrng[2])
Asim<-runif(nsim,Arng[1],Arng[2])
Vsim<-runif(nsim,Vrng[1],Vrng[2])
ilogit<-function(x)log(x/(1-x))
logit<-function(x)exp(x)/(1+exp(x))
mov1<-mov2<-array(NA,c(nsim,2,2))
for(i in 1:nsim){
mov1[i,,]<-getmov2(i,Vsim,Asim)
mov2[i,,]<-getmov2(i,Vhsim,Ahsim)
}
V2<-apply(cbind(mov1[,2,2]-Vhsim, # staying in areas 2 and 3 minus staying in area 3
mov2[,2,2]-Vsim), # staying in areas 2 and 3 minus staying in area 1
1,min) # an overestimate of the prob_staying in area 2
Sz2<-1-(Ahsim+Asim)
Asize<-cbind(Asim,Sz2,Ahsim) # area 1 is Asim as future MPs close area 1
probs<-cbind(Vsim,V2,Vhsim)
# plot(Ahsim,Vhsim,type='l',xlim=c(0,0.9)); lines(Asim,Vsim,col="grey"); lines(Sz2,V2,col="red")
mov<-array(NA,c(nsim, maxage, nareas, nareas, nyears+proyears))
for(i in 1:nsim)mov[i,,,,]<-array(rep(makemov(fracs=Asize[i,], prob=probs[i,]),each=maxage),c(maxage,nareas,nareas,nyears+proyears))
OM@MPA<-matrix(c(1,1,1,0,                                            # year1, area1 open, area2 open, area3 shut
nyears-1,0,1,1),ncol=nareas+1,byrow=T)              # nyears-1, area1 shut, area2 open, area3 open
maxage<-32
Sz2<-1-(Ahsim+Asim)
Asize<-cbind(Asim,Sz2,Ahsim) # area 1 is Asim as future MPs close area 1
probs<-cbind(Vsim,V2,Vhsim)
# plot(Ahsim,Vhsim,type='l',xlim=c(0,0.9)); lines(Asim,Vsim,col="grey"); lines(Sz2,V2,col="red")
mov<-array(NA,c(nsim, maxage, nareas, nareas, nyears+proyears))
for(i in 1:nsim)mov[i,,,,]<-array(rep(makemov(fracs=Asize[i,], prob=probs[i,]),each=maxage),c(maxage,nareas,nareas,nyears+proyears))
OM@MPA<-matrix(c(1,1,1,0,                                            # year1, area1 open, area2 open, area3 shut
nyears-1,0,1,1),ncol=nareas+1,byrow=T)              # nyears-1, area1 shut, area2 open, area3 open
# Initial depletion                                                                      # F19 ----------
initDrng<-getminmax(1,"Dh",PanelState)
initD<-runif(nsim,initDrng[1],initDrng[2])
OM@TACFrac<-getminmax(2,"IB",PanelState)                                                 # M2 -----------
OM@TACSD<-getminmax(2,"IV",PanelState)                                                   # M3 -----------
OM@TAEFrac<-getminmax(2,"IBE",PanelState)                                                # M4 -----------
OM@TAESD<-getminmax(2,"IVE",PanelState)                                                  # M5 -----------
OM@SizeLimFrac<-getminmax(2,"IBSL",PanelState)                                           # M6 -----------
OM@SizeLimFrac<-getminmax(2,"IVSL",PanelState)
CB_rng<-getminmax(3,"CB",PanelState)                                                     # D2 -----------
Cbias<-runif(nsim,CB_rng[1],CB_rng[2])
OM@beta<-getminmax(3,"Beta",PanelState)                                                  # D3 -----------
OM@cpars<-c(OM@cpars,list(Find=Find,L5=L5,LFS=LFS,Asize=Asize,mov=mov,initD=initD,Cbias=Cbias))
runApp()
shiny::runApp('inst/shiny_apps/MERA')
runApp('inst/shiny_apps/MERA')
shiny::runApp('inst/shiny_apps/MERA')
