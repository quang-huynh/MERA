buttons = c('csv', 'excel', 'pdf'),
text = 'Download'
)),
dom = 'Brti',
ordering=F
)
)%>%
formatStyle(columns = 2:ncol(Tab3), valueColumns = 2:ncol(Tab3), color = styleInterval(c(25,50,100),c('red','orange','green','darkgreen')))
}
# --- Figures ---
Fig_title[[2]] <- "Figure 1. Biomass projected since MP adoption"
Fig_text[[2]] <- "Projections of biomass relative to MSY levels. The blue regions represent the 90% and 50% probability intervals, the white solid line is the median and the dark blue lines are two example simulations. Grey horizontal lines denote the target and limit reference points. The bold black vertical line is the current year."
Figs[[2]]<-function(MSEobj_Eval,dat,dat_ind,options=list()) BMSYproj(MSEobj_Eval,MSEobj_Eval,options=list( YIU=length(dat_ind@Year)-length(dat@Year)),maxcol=1)
Fig_dim[[2]] <- function(dims)list(height=420,width=600)
Fig_title[[3]] <- "Figure 2. Biomass projected since MP adoption relative to unfished SSB"
Fig_text[[3]] <- "Projections of biomass relative to MSY levels. The blue regions represent the 90% and 50% probability intervals, the white solid line is the median and the dark blue lines are two example simulations. Grey horizontal lines denote the target and limit reference points. The bold black vertical line is the current year."
Figs[[3]]<-function(MSEobj_Eval,dat,dat_ind,options=list()) B0proj(MSEobj_Eval,MSEobj_Eval,options=list( YIU=length(dat_ind@Year)-length(dat@Year)),maxcol=1)
Fig_dim[[3]] <- function(dims)list(height=420,width=600)
Fig_title[[4]] <- "Figure 3. Posterior predicted data versus those observed"
Fig_text[[4]] <- "The 'cloud' of posterior predicted data are represented by the grey shaded areas that"
Figs[[4]]<-function(MSEobj_Eval,dat,dat_ind,options=list()){
YIU=length(dat_ind@Year)-length(dat@Year)
styr=max(dat@Year)-min(dat@Year)
PPD<-MSEobj_Eval@Misc$Data[[1]]
# Standardization
predCat<-(PPD@Cat/PPD@Cat[,styr])[,styr+(1:YIU),drop=F]
predInd<-(PPD@Ind/PPD@Ind[,styr])[,styr+(1:YIU),drop=F]
predML<-(PPD@ML/PPD@ML[,styr])[,styr+(1:YIU),drop=F]
# Standardization
obsCat<-(dat_ind@Cat/dat_ind@Cat[,styr])[styr+(1:YIU)]
obsInd<-(dat_ind@Ind/dat_ind@Ind[,styr])[styr+(1:YIU)]
obsML<-(dat_ind@ML/dat_ind@ML[,styr])[styr+(1:YIU)]
yrlab<-dat_ind@Year[styr+(1:YIU)]
ppdplot<-function(pred,obs,yrlab,p=c(0.025,0.05,0.25,0.75,0.95,0.975),pcols=c("grey90","grey78","grey66"),lab="",pcex=1.3){
qmat<-apply(pred,2,quantile,p)
nobs<-length(obs)
ylim<-range(pred,obs)
plot(range(yrlab),ylim,col="white")
yind<-c(1:nobs,nobs:1)
rind<-nobs:1
polygon(yrlab[yind],c(qmat[1,],qmat[6,rind]),col=pcols[1],border=pcols[1])
polygon(yrlab[yind],c(qmat[2,],qmat[5,rind]),col=pcols[2],border=pcols[2])
polygon(yrlab[yind],c(qmat[3,],qmat[4,rind]),col=pcols[3],border=pcols[3])
#obs<-qmat[cbind(1:nobs,1:nobs)]-0.02
ocol<-rep("black",nobs)
ocol[obs<qmat[2,]|obs>qmat[5,]]<-"orange"
ocol[obs<qmat[1,]|obs>qmat[6,]]<-"red"
points(yrlab,obs,col=ocol,pch=19,cex=pcex)
#points(yrlab,obs,pch=1,cex=pcex)
mtext(lab,3,line=0.6,font=2)
}
par(mfrow=c(1,3),mai=c(0.3,0.3,0.2,0.01),omi=c(0.5,0.5,0.05,0.05))
ppdplot(pred=predCat,obs=obsCat,yrlab,lab="Catch")
ppdplot(pred=predML,obs=obsML,yrlab,lab="Mean Length in Catch")
ppdplot(pred=predInd,obs=obsInd,yrlab,lab="Index of Abundance")
mtext("Year",1,line=1.5,outer=T)
mtext(paste("Data relative to",yrlab[1]-1),2,line=1.5,outer=T)
legend('topleft',legend=c("95% PI","90% PI","50% PI"),fill=c("grey90","grey78","grey66"),title="Pred. Data")
legend('topright',legend=c("Consistent","Borderline","Inconsistent"),pch=19,col=c("black","orange","red"),title="Obs. Data",text.col=c("black","orange","red"))
}
Fig_dim[[4]] <- function(dims)list(height=400,width=800)
Fig_title[[5]] <- "Figure 4. Joint Posterior predicted data"
Fig_text[[5]] <- "For both posterior predicted data (blue points) and observed (orange crosses) Catch (C), Mean Length (ML), and relative abundance index data (I), The mean (M), variance (V)
and slope (S) of three types of data are calculated. The figure below shows the marginal distribution of these data."
Figs[[5]]<-function(MSEobj_Eval,dat,dat_ind,options=list()) plotInd(MSEobj_Eval,dat,dat_ind,pCC=TRUE)
Fig_dim[[5]] <- function(dims)list(height=700,width=700)
Fig_title[[6]] <- "Figure 5. Multivariate analysis of observed versus predicted data"
Fig_text[[6]] <- "The multivariate (Mahalanobis) distance from the mean of the predicted data (blue distribution) (of Figure 4 above) is calculated to detect whether the
observed data (orange vertical line) can be considered to be an outlier."
Figs[[6]]<-function(MSEobj_Eval,dat,dat_ind,options=list()) plotInd(MSEobj_Eval,dat,dat_ind,pCC=FALSE)
Fig_dim[[6]] <- function(dims)list(height=550,width=550)
Evaluation<-list(Tabs=Tabs, Figs=Figs, Tab_title=Tab_title, Tab_text=Tab_text, Fig_title=Fig_title,
Fig_text=Fig_text, Fig_dim=Fig_dim, Intro_title=Intro_title, Intro_text=Intro_text, options=options)
# ========== Build =============================
MSC<-list(Risk_Assessment=Risk_Assessment,SD=SD,Planning=Planning,Evaluation=Evaluation)
None<-list()
Skin<-MSC
params$Skin=Skin
params$Skin$SD$Fig_dim[[3]]
dims<-list(nmeth=sum(unlist(lapply(params$Status$Est,length))>3),SimSam=!is.null(params$Status$SimSams))
dims
i<-1
params$Skin$SD$Tabs[[i]](params$Status)
width=params$Skin$SD$Fig_dim[[i]]()$width/100
height=params$Skin$SD$Fig_dim[[i]]()$height/100
width
height
params$Skin$SD$Figs[[i]](params$Status)
}
params$Skin$SD$Tabs[[i]](params$Status)
width=params$Skin$SD$Fig_dim[[i]](dims)$width/100
height=params$Skin$SD$Fig_dim[[i]](dims)$height/100
params$Skin$SD$Figs[[i]](params$Status)
i<-2
params$Skin$SD$Figs[[i]](params$Status)
length(body(params$Skin$SD$Figs[[i]]))
i<-3
params$Skin$SD$Tabs[[i]](params$Status)
width=params$Skin$SD$Fig_dim[[3]](dims)$width/100
height=params$Skin$SD$Fig_dim[[3]](dims)$height/100
cat('\n')
cat(paste0("# ",params$Skin$SD$Tab_title[[i]]))
cat('\n')
cat(params$Skin$SD$Tab_text[[i]])
cat('\n')
params$Skin$SD$Tabs[[i]](params$Status)
width=params$Skin$SD$Fig_dim[[3]](dims)$width/100
height=params$Skin$SD$Fig_dim[[3]](dims)$height/100
cat('\n')
cat(paste0("# ",params$Skin$SD$Fig_title[[i]]))
cat('\n')
cat(params$Skin$SD$Fig_text[[i]])
cat('\n')
if(length(body(params$Skin$SD$Figs[[i]]))>1){
params$Skin$SD$Figs[[i]](params$Status)
}
runApp('inst/shiny_apps/MERA')
rm(list = ls())               # remove all items in workspace
install.packages("devtools")  # needed to install latest MERA directly from github
# ----- INSTALLATION 2: install dependencies --------------------------------------------------- (one time only)
rm(list = ls())               # remove all items in workspace
install.packages("DLMtool")
install.packages("corpcor")
install.packages("formattable")
install.packages("kableExtra")
install.packages("knitr")
install.packages("shiny")
install.packages("dplyr")
install.packages("shinyjs")
install.packages("httpuv")
install.packages("shinyalert")
install.packages("tinytex")
install.packages("MSEtool")
install.packages("DT")
install.packages("mvtnorm")
install.packages("cowplot")
devtools::install_github("tcarruth/MERA", type="source")
install.packages("Rcpp")
install.packages("Rcpp")
devtools::install_github("tcarruth/MERA", type="source")
devtools::install_github("tcarruth/MERA", type="source")
library(MERA)
Shiny(MERA)
?Shiny
Shiny()
Shiny('MERA')
ij
nexp<-length(OMfuncs)
OMdir<-"C:/Users/tcar_/Dropbox/BFT MSE/Meetings/Webinar Dec 2019/Revised OMs no SPr change/"
dirs<-paste0(OMdir,1:nexp)
M3dir<-paste0(getwd(),"/M3")
OMfuncs<-c("wt_P_def","wt_0_def","wt_1_def","wt_2_Med","wt_3_Med","wt_4_2R_Med","wt_5_2R_Med","wt_6_Sel","wt_7_SPr")
nexp<-length(OMfuncs)
OMdir<-"C:/Users/tcar_/Dropbox/BFT MSE/Meetings/Webinar Dec 2019/Revised OMs no SPr change/"
OMdir
dirs<-paste0(OMdir,1:nexp)
load(system.file("ts2017.Rdata", package="ABTMSE"))
dat<-ts2017
OMnos<-   c(2,        2,       2,       2,      2,         1,          1,           2,      2)
OMnames <-c("P_def", "0_def", "1_def", "2_Med+","3_Med++","4_2R_Med+","5_2R_Med++","6_Sel","7_SPr")
OMdirs<-dirs
ij<-1
load(paste0(dirs[ij],"/OMI"))
out<-M3read(OMDir=dirs[ij])
render(input=paste0(getwd(),"/R_package/ABTMSE/inst/OMreport_v2.Rmd"),
output_file=paste0(dirs[ij],"/Report_",ij,".html"))
library(ABTMSE)
load(paste0(dirs[ij],"/OMI"))
out<-M3read(OMDir=dirs[ij])
render(input=paste0(getwd(),"/R_package/ABTMSE/inst/OMreport_v2.Rmd"),
output_file=paste0(dirs[ij],"/Report_",ij,".html"))
setwd("C:/Users/tcar_/Dropbox/abft-mse")
load(paste0(dirs[ij],"/OMI"))
out<-M3read(OMDir=dirs[ij])
render(input=paste0(getwd(),"/R_package/ABTMSE/inst/OMreport_v2.Rmd"),
output_file=paste0(dirs[ij],"/Report_",ij,".html"))
source('C:/Users/tcar_/Dropbox/abft-mse/R_package/ABTMSE/R/M3_tools.R', echo=TRUE)
load(paste0(dirs[ij],"/OMI"))
out<-M3read(OMDir=dirs[ij])
render(input=paste0(getwd(),"/R_package/ABTMSE/inst/OMreport_v2.Rmd"),
output_file=paste0(dirs[ij],"/Report_",ij,".html"))
library(DLMextra)
avail('OM')
library(MSEtool)
library(DLMextra)
library(cowplot)
avail('OM')
class(Bluefin_Tuna_EAtl_ICCAT)
# --- Set up operating models low/high depletion x low/high recruitment -----
OM1<-OM2<-OM3<-OM4<-Bluefin_Tuna_EAtl_ICCAT
OM1@D<-OM2@D<-c(0.1,0.1) # Low depletion level
OM3@D<-OM4@D<-c(0.3,0.3) # High depletion level
nrecs<-testOM@maxage+testOM@nyears+testOM@proyears-1
RecHigh<-RecLow<-array(trlnorm(testOM@nsim*nrecs,1,0.3),c(testOM@nsim,nrecs))
Last40yrs<-nrecs-(39:0)
RecLow[,Last40yrs]<-RecLow[,Last40yrs]/2 # half recruitment strength after 10 years (last 40 years) of projection
OM1@cpars$Perr_y<-OM3@cpars$Perr_y<-RecHigh
OM2@cpars$Perr_y<-OM4@cpars$Perr_y<-RecLow
# --- Define index-based MPs -----
ITargMP<-function(x,Data,BMSY_B0=0.4,MaxChg=10,yrsmth=3){
oldind<-mean(Data@Ind[x,1:yrsmth])
curind<-mean(Data@Ind[x,length(Data@Ind[x,])-((yrsmth-1):0)])
curlev<-curind/oldind
oldTAC<-Data@MPrec[x]
newTAC<-curlev/BMSY_B0*oldTAC
LB<-oldTAC*(1-MaxChg/100)
UB<-oldTAC*(1+MaxChg/100)
if(newTAC<LB) newTAC<-LB
if(newTAC>UB) newTAC<-UB
Rec=new('Rec')
Rec@TAC<-newTAC
Rec
}
ConstUMP<-function(x,Data,Utarg=0.2,q=1e-04,yrsmth=3,MaxChg=10){
curind<-mean(Data@Ind[x,length(Data@Ind[x,])-((yrsmth-1):0)])
curB<-curind/q
newTAC<-curB*Utarg
oldTAC<-Data@MPrec[x]
LB<-oldTAC*(1-MaxChg/100)
UB<-oldTAC*(1+MaxChg/100)
if(newTAC<LB) newTAC<-LB
if(newTAC>UB) newTAC<-UB
Rec=new('Rec')
Rec@TAC<-newTAC
Rec
}
# Index target MPs
IT_40_20<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.4,MaxChg=20)
IT_40_10<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.4,MaxChg=10)
IT_40_5<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.4,MaxChg=5)
IT_30_20<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.3,MaxChg=20)
IT_30_10<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.3,MaxChg=10)
IT_30_5<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.3,MaxChg=5)
# Constant exploitation rate MPs
UT_30<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.3)
UT_25<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.25)
UT_20<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.2)
UT_15<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.15)
UT_10<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.1)
UT_5<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.05)
# State Space Surplus production model-based MPs
SPSS_MSY<-function (x, Data, reps = 1) {
dependencies <- "Data@Cat, Data@Ind"
do_Assessment <- SP_SS(x = x, Data = Data,start = list(dep = 0.875, sigma = 0.1, tau = 0.1))
Rec <- HCR_MSY(Assessment = do_Assessment, reps = reps)
Rec@Misc <- MSEtool:::Assess_diagnostic(x, Data, do_Assessment, include_assessment = FALSE)
return(Rec)
}
SPSS_4010<-function (x, Data, reps = 1){
dependencies <- "Data@Cat, Data@Ind"
do_Assessment <- SP_SS(x = x, Data = Data,start = list(dep = 0.875, sigma = 0.1, tau = 0.1))
Rec <- HCR_MSY(Assessment = do_Assessment, reps = reps)
Rec@Misc <- MSEtool:::Assess_diagnostic(x, Data, do_Assessment, include_assessment = FALSE)
return(Rec)
}
DD_4010<-DD4010 # rename existing MP
DD_MSY<-DD
# Assign correct classes to MPs
class(IT_40_20)<-class(IT_40_10)<-class(IT_40_5)<-class(IT_30_20)<-class(IT_30_10)<-class(IT_30_5)<-
class(UT_30)<-class(UT_25)<-class(UT_20)<-class(UT_15)<-class(UT_10)<-class(UT_5)<-
class(SPSS_MSY)<-class(SPSS_4010)<-class(DD_MSY)<-class(DD_4010)<-"MP"
MPs=c("IT_40_20","IT_40_10","IT_40_5","IT_30_20","IT_30_10","IT_30_5",
"UT_30","UT_25","UT_20","UT_15","UT_10","UT_5",
"SP_MSY","SP_4010","SPSS_MSY","SPSS_4010",
"DD_MSY","DD_4010","DDSS_MSY","DDSS_4010")
testMSE1<-runMSE(OM1,MPs=MPs)
testMSE2<-runMSE(OM2,MPs=MPs)
testMSE3<-runMSE(OM3,MPs=MPs)
testMSE4<-runMSE(OM4,MPs=MPs)
OM1<-OM2<-OM3<-OM4<-Bluefin_Tuna_EAtl_ICCAT
OM1@D<-OM2@D<-c(0.1,0.1) # Low depletion level
OM3@D<-OM4@D<-c(0.3,0.3) # High depletion level
nrecs<-OM1@maxage+OM1@nyears+OM1@proyears-1
RecHigh<-RecLow<-array(trlnorm(OM1@nsim*nrecs,1,0.3),c(OM1@nsim,nrecs))
Last40yrs<-nrecs-(39:0)
RecLow[,Last40yrs]<-RecLow[,Last40yrs]/2 # half recruitment strength after 10 years (last 40 years) of projection
OM1@cpars$Perr_y<-OM3@cpars$Perr_y<-RecHigh
OM2@cpars$Perr_y<-OM4@cpars$Perr_y<-RecLow
# --- Define index-based MPs -----
ITargMP<-function(x,Data,BMSY_B0=0.4,MaxChg=10,yrsmth=3){
oldind<-mean(Data@Ind[x,1:yrsmth])
curind<-mean(Data@Ind[x,length(Data@Ind[x,])-((yrsmth-1):0)])
curlev<-curind/oldind
oldTAC<-Data@MPrec[x]
newTAC<-curlev/BMSY_B0*oldTAC
LB<-oldTAC*(1-MaxChg/100)
UB<-oldTAC*(1+MaxChg/100)
if(newTAC<LB) newTAC<-LB
if(newTAC>UB) newTAC<-UB
Rec=new('Rec')
Rec@TAC<-newTAC
Rec
}
ConstUMP<-function(x,Data,Utarg=0.2,q=1e-04,yrsmth=3,MaxChg=10){
curind<-mean(Data@Ind[x,length(Data@Ind[x,])-((yrsmth-1):0)])
curB<-curind/q
newTAC<-curB*Utarg
oldTAC<-Data@MPrec[x]
LB<-oldTAC*(1-MaxChg/100)
UB<-oldTAC*(1+MaxChg/100)
if(newTAC<LB) newTAC<-LB
if(newTAC>UB) newTAC<-UB
Rec=new('Rec')
Rec@TAC<-newTAC
Rec
}
# Index target MPs
IT_40_20<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.4,MaxChg=20)
IT_40_10<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.4,MaxChg=10)
IT_40_5<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.4,MaxChg=5)
IT_30_20<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.3,MaxChg=20)
IT_30_10<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.3,MaxChg=10)
IT_30_5<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.3,MaxChg=5)
# Constant exploitation rate MPs
UT_30<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.3)
UT_25<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.25)
UT_20<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.2)
UT_15<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.15)
UT_10<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.1)
UT_5<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.05)
# State Space Surplus production model-based MPs
SPSS_MSY<-function (x, Data, reps = 1) {
dependencies <- "Data@Cat, Data@Ind"
do_Assessment <- SP_SS(x = x, Data = Data,start = list(dep = 0.875, sigma = 0.1, tau = 0.1))
Rec <- HCR_MSY(Assessment = do_Assessment, reps = reps)
Rec@Misc <- MSEtool:::Assess_diagnostic(x, Data, do_Assessment, include_assessment = FALSE)
return(Rec)
}
SPSS_4010<-function (x, Data, reps = 1){
dependencies <- "Data@Cat, Data@Ind"
do_Assessment <- SP_SS(x = x, Data = Data,start = list(dep = 0.875, sigma = 0.1, tau = 0.1))
Rec <- HCR_MSY(Assessment = do_Assessment, reps = reps)
Rec@Misc <- MSEtool:::Assess_diagnostic(x, Data, do_Assessment, include_assessment = FALSE)
return(Rec)
}
DD_4010<-DD4010 # rename existing MP
DD_MSY<-DD
# Assign correct classes to MPs
class(IT_40_20)<-class(IT_40_10)<-class(IT_40_5)<-class(IT_30_20)<-class(IT_30_10)<-class(IT_30_5)<-
class(UT_30)<-class(UT_25)<-class(UT_20)<-class(UT_15)<-class(UT_10)<-class(UT_5)<-
class(SPSS_MSY)<-class(SPSS_4010)<-class(DD_MSY)<-class(DD_4010)<-"MP"
MPs=c("IT_40_20","IT_40_10","IT_40_5","IT_30_20","IT_30_10","IT_30_5",
"UT_30","UT_25","UT_20","UT_15","UT_10","UT_5",
"SP_MSY","SP_4010","SPSS_MSY","SPSS_4010",
"DD_MSY","DD_4010","DDSS_MSY","DDSS_4010")
testMSE1<-runMSE(OM1,MPs=MPs)
testMSE2<-runMSE(OM2,MPs=MPs)
testMSE3<-runMSE(OM3,MPs=MPs)
testMSE4<-runMSE(OM4,MPs=MPs)
setup()
OM1<-OM2<-OM3<-OM4<-Bluefin_Tuna_EAtl_ICCAT
OM1@D<-OM2@D<-c(0.1,0.1) # Low depletion level
OM3@D<-OM4@D<-c(0.3,0.3) # High depletion level
nrecs<-OM1@maxage+OM1@nyears+OM1@proyears-1
RecHigh<-RecLow<-array(trlnorm(OM1@nsim*nrecs,1,0.3),c(OM1@nsim,nrecs))
Last40yrs<-nrecs-(39:0)
RecLow[,Last40yrs]<-RecLow[,Last40yrs]/2 # half recruitment strength after 10 years (last 40 years) of projection
OM1@cpars$Perr_y<-OM3@cpars$Perr_y<-RecHigh
OM2@cpars$Perr_y<-OM4@cpars$Perr_y<-RecLow
# --- Define index-based MPs -----
ITargMP<-function(x,Data,BMSY_B0=0.4,MaxChg=10,yrsmth=3){
oldind<-mean(Data@Ind[x,1:yrsmth])
curind<-mean(Data@Ind[x,length(Data@Ind[x,])-((yrsmth-1):0)])
curlev<-curind/oldind
oldTAC<-Data@MPrec[x]
newTAC<-curlev/BMSY_B0*oldTAC
LB<-oldTAC*(1-MaxChg/100)
UB<-oldTAC*(1+MaxChg/100)
if(newTAC<LB) newTAC<-LB
if(newTAC>UB) newTAC<-UB
Rec=new('Rec')
Rec@TAC<-newTAC
Rec
}
ConstUMP<-function(x,Data,Utarg=0.2,q=1e-04,yrsmth=3,MaxChg=10){
curind<-mean(Data@Ind[x,length(Data@Ind[x,])-((yrsmth-1):0)])
curB<-curind/q
newTAC<-curB*Utarg
oldTAC<-Data@MPrec[x]
LB<-oldTAC*(1-MaxChg/100)
UB<-oldTAC*(1+MaxChg/100)
if(newTAC<LB) newTAC<-LB
if(newTAC>UB) newTAC<-UB
Rec=new('Rec')
Rec@TAC<-newTAC
Rec
}
# Index target MPs
IT_40_20<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.4,MaxChg=20)
IT_40_10<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.4,MaxChg=10)
IT_40_5<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.4,MaxChg=5)
IT_30_20<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.3,MaxChg=20)
IT_30_10<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.3,MaxChg=10)
IT_30_5<-function(x,Data,reps=1)ITargMP(x,Data,BMSY_B0=0.3,MaxChg=5)
# Constant exploitation rate MPs
UT_30<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.3)
UT_25<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.25)
UT_20<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.2)
UT_15<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.15)
UT_10<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.1)
UT_5<-function(x,Data,reps=1)ConstUMP(x,Data,Utarg=0.05)
# State Space Surplus production model-based MPs
SPSS_MSY<-function (x, Data, reps = 1) {
dependencies <- "Data@Cat, Data@Ind"
do_Assessment <- SP_SS(x = x, Data = Data,start = list(dep = 0.875, sigma = 0.1, tau = 0.1))
Rec <- HCR_MSY(Assessment = do_Assessment, reps = reps)
Rec@Misc <- MSEtool:::Assess_diagnostic(x, Data, do_Assessment, include_assessment = FALSE)
return(Rec)
}
SPSS_4010<-function (x, Data, reps = 1){
dependencies <- "Data@Cat, Data@Ind"
do_Assessment <- SP_SS(x = x, Data = Data,start = list(dep = 0.875, sigma = 0.1, tau = 0.1))
Rec <- HCR_MSY(Assessment = do_Assessment, reps = reps)
Rec@Misc <- MSEtool:::Assess_diagnostic(x, Data, do_Assessment, include_assessment = FALSE)
return(Rec)
}
DD_4010<-DD4010 # rename existing MP
DD_MSY<-DD
# Assign correct classes to MPs
class(IT_40_20)<-class(IT_40_10)<-class(IT_40_5)<-class(IT_30_20)<-class(IT_30_10)<-class(IT_30_5)<-
class(UT_30)<-class(UT_25)<-class(UT_20)<-class(UT_15)<-class(UT_10)<-class(UT_5)<-
class(SPSS_MSY)<-class(SPSS_4010)<-class(DD_MSY)<-class(DD_4010)<-"MP"
MPs=c("IT_40_20","IT_40_10","IT_40_5","IT_30_20","IT_30_10","IT_30_5",
"UT_30","UT_25","UT_20","UT_15","UT_10","UT_5",
"SP_MSY","SP_4010","SPSS_MSY","SPSS_4010",
"DD_MSY","DD_4010","DDSS_MSY","DDSS_4010")
testMSE1<-runMSE(OM1,MPs=MPs)
testMSE2<-runMSE(OM2,MPs=MPs)
testMSE3<-runMSE(OM3,MPs=MPs)
testMSE4<-runMSE(OM4,MPs=MPs)
testMSE1<-runMSE(OM1,MPs=MPs,parallel=TRUE)
testMSE2<-runMSE(OM2,MPs=MPs,parallel=TRUE)
testMSE3<-runMSE(OM3,MPs=MPs,parallel=TRUE)
testMSE4<-runMSE(OM4,MPs=MPs,parallel=TRUE)
library(MSEtool)
library(DLMtool)
DLMextra()
library(DLMextra)
library(cowplot)
setup()
library(MSEtool)
library(DLMtool)
library(DLMextra)
library(cowplot)
setup()
library(DLMtool)
setup()
library(MSEtool)
library(DLMtool)
#DLMextra()
library(DLMextra)
library(cowplot)
setup()
library(MERA)
source("C:/GitHub/MERA/inst/shiny_apps/MERA/Source/OM/Scoping.R")
source("C:/GitHub/MERA/inst/shiny_apps/MERA/Source/Data/Data_trim.R",local=TRUE)
setwd("C:/Users/tcar_/Dropbox/MERA prototyping/Revised OM_Scoping")
OM<-readRDS("Lutjanus_malaba.OM")
dat<-new('Data',"malabaricus_input_adrian.csv")
dat2<-readRDS("YFTsimdata.Data")
codes<-getCodes(dat2,maxtest=6)
OM<-readRDS("Tiger_flathead.OM")
dat<-new('Data',"Tiger_flathead_data.csv")
codes<-getCodes(dat,maxtest=6)
dat_test<-Data_trimer(dat)
dat_test
dat_ind<-dat
dat<-dat_test
codes<-getCodes(dat,maxtest=3)
ncode<-length(codes)
for(cc in 1:ncode){
Fit[[cc]]<-GetDep(OM,dat,code=codes[cc],cores=4)
Est[[cc]]<-Fit[[cc]]@OM@cpars$D[Fit[[cc]]@conv]
if(sum(Fit[[cc]]@conv)==0)print(paste(cc,codes[cc],"Did not return depletion"))
}
library(MERA)
library(MSEtool)
library(DLMtool)
dat<-new('Data',"Tiger_flathead_data.csv")
codes<-getCodes(dat,maxtest=3)
dat_test<-Data_trimer(dat)
dat_ind<-dat
dat<-dat_test
ncode<-length(codes)
Est<-Sim<-Fit<-list()
setup()
for(cc in 1:ncode){
Fit[[cc]]<-GetDep(OM,dat,code=codes[cc],cores=4)
Est[[cc]]<-Fit[[cc]]@OM@cpars$D[Fit[[cc]]@conv]
if(sum(Fit[[cc]]@conv)==0)print(paste(cc,codes[cc],"Did not return depletion"))
}
library(MERA)
library(MSEtool)
library(DLMtool)
source("C:/GitHub/MERA/inst/shiny_apps/MERA/Source/OM/Scoping.R")
source("C:/GitHub/MERA/inst/shiny_apps/MERA/Source/Data/Data_trim.R",local=TRUE)
setwd("C:/Users/tcar_/Dropbox/MERA prototyping/Revised OM_Scoping")
OM<-readRDS("Tiger_flathead.OM")
dat<-new('Data',"Tiger_flathead_data.csv")
codes<-getCodes(dat,maxtest=3)
dat_test<-Data_trimer(dat)
dat_ind<-dat
dat<-dat_test
ncode<-length(codes)
Est<-Sim<-Fit<-list()
setup()
for(cc in 1:ncode){
Fit[[cc]]<-GetDep(OM,dat,code=codes[cc],cores=4)
Est[[cc]]<-Fit[[cc]]@OM@cpars$D[Fit[[cc]]@conv]
if(sum(Fit[[cc]]@conv)==0)print(paste(cc,codes[cc],"Did not return depletion"))
}
shiny::runApp('C:/GitHub/MERA/inst/shiny_apps/MERA')
