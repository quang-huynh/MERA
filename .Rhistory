OM@cpars$Linf
dat$vbK
dat@vbK
OM@cpars$K
dat@vbK / mean(OM@cpars$K)
mean(OM@cpars$K)
dat@vbK / mean(OM@cpars$K)
OM@cpars$t0
dat@vbt0
OM@t0
rep(dat@vbt0,2)
dat@Mort
OM@M2
OM@cpars$M
dat@Mort / mean(OM@cpars$M)
OM@cpars$L50
dat@L50
runApp('C:/GitHub/MERA/inst/shiny_apps/MERA')
OM@cpars$Linf
avail('MP')
SP_MSY
SP
setwd("C:/Users/tcar_/Dropbox/abft-mse/data/ICCAT_2020_1")
FI<-read.csv("FI_indices_compiled_OM2020Mar.csv")
CPUE<-read.csv("CPUE_indices compiled_OM2020Mar_with_lt.csv")
CPUE
FI
yrs<-2017:2019
CPUE<-CPUE[CPUE$Year%in%yrs,]
FI<-FI[FI$Year%in%yrs,]
CPUE
FI
all<-rbind(FI[,c(1,9)],
CPUE[,c(1,9)])
all
ind<-cbind(match(all$Name,nams),match(all$Year,yrs))
outmat<-matrix(0,nrow=ni,ncol=ny)
outmat[ind]<-
nams<-unique(all$Name)
ni<-length(nams)
ny<-length(yrs)
ind<-cbind(match(all$Name,nams),match(all$Year,yrs))
outmat<-matrix(0,nrow=ni,ncol=ny)
outmat[ind]<-1
outmat
row.names(outmat)<-nams
names(outmat<-yrs)
outmat
all<-rbind(FI[,c(1,9)],
CPUE[,c(1,9)])
nams<-unique(all$Name)
ni<-length(nams)
ny<-length(yrs)
ind<-cbind(match(all$Name,nams),match(all$Year,yrs))
outmat<-matrix(0,nrow=ni,ncol=ny)
outmat[ind]<-1
row.names(outmat)<-nams
outmat
names(outmat)<-yrs
outmat
nams<-unique(all$Name)
ni<-length(nams)
ny<-length(yrs)
ind<-cbind(match(all$Name,nams),match(all$Year,yrs))
outmat<-matrix(0,nrow=ni,ncol=ny)
outmat[ind]<-1
row.names(outmat)<-nams
col.names(outmat)<-yrs
?row.names
colnames(outmat)<-yrs
outmat
rownames(outmat)<-nams
outmat
write.csv(outmat,file="Indices 2017-2019.csv",sep=",")
write.csv(outmat,file="Indices 2017-2019.csv")
write.csv(outmat,file="C:/Users/tcar_/Dropbox/BFT MSE/Communications/Apr 20 updates Index years - AC for recent years - TS excerpt/Indices 2017-2019.csv")
setwd("C:/Users/tcar_/Dropbox/abft-mse/data/ICCAT_2020_1")
FI<-read.csv("FI_indices_compiled_OM2020Mar.csv")
CPUE<-read.csv("CPUE_indices compiled_OM2020Mar_with_lt.csv")
yrs<-2017:2019
CPUE<-CPUE[CPUE$Year%in%yrs,]
FI<-FI[FI$Year%in%yrs,]
all<-rbind(FI[,c(1,7,9)],
CPUE[,c(1,6,9)])
n
all
names(CP*E)
names(CPUE)
setwd("C:/Users/tcar_/Dropbox/abft-mse/data/ICCAT_2020_1")
FI<-read.csv("FI_indices_compiled_OM2020Mar.csv")
names(FI)[7]<-"Index"
CPUE<-read.csv("CPUE_indices compiled_OM2020Mar_with_lt.csv")
yrs<-2017:2019
CPUE<-CPUE[CPUE$Year%in%yrs,]
FI<-FI[FI$Year%in%yrs,]
all<-rbind(FI[,c(1,7,9)],
CPUE[,c(1,6,9)])
CPUE[,c(1,6,9)])
nams<-unique(all$Name)
ni<-length(nams)
ny<-length(yrs)
ind<-cbind(match(all$Name,nams),match(all$Year,yrs))
outmat<-matrix(0,nrow=ni,ncol=ny)
outmat[ind]<-all1
rownames(outmat)<-nams
colnames(outmat)<-yrs
outmat
ind<-cbind(match(all$Name,nams),match(all$Year,yrs))
outmat<-matrix(0,nrow=ni,ncol=ny)
outmat[ind]<-all$Index
rownames(outmat)<-nams
colnames(outmat)<-yrs
outmat
write.csv(outmat,file="C:/Users/tcar_/Dropbox/BFT MSE/Communications/Apr 20 updates Index years - AC for recent years - TS excerpt/Indices 2017-2019.csv")
Indices
library(ABTMSE)
loadABT()
Indices
Obs@MPind
Good_Obs@MPind
class('dat')
avail('dat')
avail('data')
dset_example_East
dim(dset_example_East$Iobs)
Indices
dset_example_East$Iobs[,12,53:55]
dset_example_East$Iobs[,7,53:55]
shiny::runApp('inst/shiny_apps/MERA')
?actionBttn
runApp('inst/shiny_apps/MERA')
runApp('inst/shiny_apps/MERA')
?actionButton
runApp('inst/shiny_apps/MERA')
runApp('inst/shiny_apps/MERA')
runApp('inst/shiny_apps/MERA')
?exists
exists(MSEobj)
exists("MSEobj")
runApp('inst/shiny_apps/MERA')
shiny::runApp()
?SRA_scope
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
placement<-list(rep('bottom',12))
placement
placement<-as.list(rep('bottom',12))
placement
placement[[1]]
install.packages(shinyBS)
install.packages("shinyBS")
runApp()
?addTooltip
runApp()
source('C:/GitHub/MERA/inst/shiny_apps/MERA/Source/App/Tooltips.R', echo=TRUE)
?actionBttn
runApp()
?actionBttn
runApp()
runApp()
addTooltip()
?addTooltip
bsPopover
runApp()
shiny::runApp('inst/shiny_apps/MERA')
listy$Status
plot(listy$Status$Fit)
plot(listy$Status$Fit[[1]])
names(Status$Fit)
names(Status$Fit[[1]])
names(listy$Status$Fit[[1]])
runApp('inst/shiny_apps/MERA')
Status$Fit
length(status$Fit)
length(Status$Fit)
plot(Status$Fit)
plot(Status$Fit[[1]])
withProgress(message = "Running Status Determination", value = 0, {
#saveRDS(OM,"C:/temp/OM.rda")
incProgress(1/2, detail = 50)
Fit[[1]]<-GetDep(OM,dat,code=codes,cores=4)
Est[[1]]<-Fit[[1]]@OM@cpars$D[Fit[[1]]@conv]
if(sum(Fit[[1]]@conv)==0)AM(paste(codes,"Did not return depletion"))
incProgress(2/2, detail = 50)
})
runApp('inst/shiny_apps/MERA')
shiny::runApp('inst/shiny_apps/MERA')
shiny::runApp('inst/shiny_apps/MERA')
installed.packages('DLMtool')
installed.package('DLMtool')
install.package('DLMtool')
install.packages("DLMtool")
shiny::runApp('inst/shiny_apps/MERA')
shiny::runApp('inst/shiny_apps/MERA')
?setup
setup(cpus=ncpus)
ncpus<-4
setup(cpus=ncpus)
runApp('inst/shiny_apps/MERA')
runApp('inst/shiny_apps/MERA')
PanelState
source('C:/GitHub/MERA/inst/shiny_apps/MERA/Source/App/Update_objects.R', echo=TRUE)
runApp('inst/shiny_apps/MERA')
PanelState<-readRDS("C:/temp/PanelState_autosave.rds")
PanelState
lapply(PanelState,sum)
lapply(PanelState,function(x)lapply(x,sum))
lapply(PanelState[1:3],function(x)lapply(x,sum))
Qs<-lapply(PanelState[1:3],function(x)lapply(x,sum))
unlist(Qs)
any(unlist(Qs)==0)
Qs<-unlist(lapply(PanelState[1:3],function(x)lapply(x,sum)))
Qs
runApp('inst/shiny_apps/MERA')
checkQs<-function(){
Qs<-unlist(lapply(PanelState[1:3],function(x)lapply(x,sum)))
Qnams<-c(paste0("F",2:19),paste("M",1:7),paste0("D",2:3))
list(error=any(Qs==0),probQs=Qnams[Qs==0])
}
checkQs()
Qs<-unlist(lapply(PanelState[1:3],function(x)lapply(x,sum)))
Qs
checkQs<-function(){
Qs<-unlist(lapply(PanelState[1:3],function(x)lapply(x,sum)))
Qnams<-c(paste0("F",2:19),paste("M",1:7),paste0("D",1:4))
list(error=any(Qs==0),probQs=Qnams[Qs==0])
}
checkQs
checkQs()
temp<-checkQs()
paste("The following questions have no been answered:",paste(temp$probQs,sep=","))
paste("The following questions have no been answered:",paste(temp$probQs,sep=","),collapse=T)
cat("The following questions have no been answered:",paste(temp$probQs,sep=","))
runApp('inst/shiny_apps/MERA')
?shinyalert
runApp('inst/shiny_apps/MERA')
paste("The following questions have no been answered:",paste(temp$probQs,sep=","))
paste(temp$probQs,sep=",")
paste(temp$probQs,sep=",")
?paste
temp$probQs
paste(temp$probQs,collapse=", ")
checkQs<-function(){
Qs<-unlist(lapply(PanelState[1:3],function(x)lapply(x,sum)))
Qnams<-c(paste0("F",2:19),paste0("M",1:7),paste0("D",1:4))
list(error=any(Qs==0),probQs=Qnams[Qs==0])
}
paste(temp$probQs,collapse=", ")
paste("The following questions have no been answered:",paste(temp$probQs,collapse=", "))
runApp('inst/shiny_apps/MERA')
?stop
checkQs()$error
if(checkQs()$error){shinyalert("Incomplete Questionnaire", text=paste("The following questions have no been answered:",paste(temp$probQs,collapse=", ")), type = "warning");stop()}
runApp('inst/shiny_apps/MERA')
runApp('inst/shiny_apps/MERA')
Just<-readRDS("C:/temp/Just.rds")
Just
Just[[1]]
Just[[1]][1]<-"1. Describe the history and current status of the fishery, including fleets, sectors, vessel types and practices/gear by vessel type, landing ports, economics/markets, whether targeted/bycatch, other stocks caught in the fishery.\n\n2. Describe the stock’s ecosystem functions, dependencies, and habitat types.\n\n3. Provide all relevant reference materials, such as assessments, research, and other analysis.\nhttp://abchan.fra.go.jp/digests2019/index.html\n      "
Just<-readRDS("C:/temp/Just.rds")
Just[[1]][1]=="1. Describe the history and current status of the fishery, including fleets, sectors, vessel types and practices/gear by vessel type, landing ports, economics/markets, whether targeted/bycatch, other stocks caught in the fishery.\n\n2. Describe the stock’s ecosystem functions, dependencies, and habitat types.\n\n3. Provide all relevant reference materials, such as assessments, research, and other analysis.\nhttp://abchan.fra.go.jp/digests2019/index.html\n      "
unlist(Just)
Js<-unlist(Just)
probJs<-Js=="No justification was provided"
probJs
Just
Js<-unlist(Just)
probJs<-grepl("No justification",Js)
probJs
probJs<-grepl("No justification",Js)|Js==""
probJs
probJs[1]<-(Js[1]=="1. Describe the history and current status of the fishery, including fleets, sectors, vessel types and practices/gear by vessel type, landing ports, economics/markets, whether targeted/bycatch, other stocks caught in the fishery.\n\n2. Describe the stock’s ecosystem functions, dependencies, and habitat types.\n\n3. Provide all relevant reference materials, such as assessments, research, and other analysis.\nhttp://abchan.fra.go.jp/digests2019/index.html\n      ")
probJs[20]<-(Js[20]=="1. Describe what, if any, current management measures are used to constrain catch/effort.\n\n2. Describe historical management measures, if any.\n\n3. Describe main strengths and weaknesses of current monitoring and enforcement capacity.\n\n4. Describe and reference any legal/policy requirements for management, monitoring and enforcement.\n\n       ")
probJs[27]<-(Js[27]=="1. Provide the time series (specify years, if possible) that exist for catch, effort, and CPUE/abundance indices.\n\n2. Describe how these data collected (e.g., log books, dealer reporting, observers).\n\n3. Describe what types of sampling programs and methodologies exist for data collection, including the time-series of available sampling data and quality.\n\n4. Describe all sources of uncertainty in the status, biology, life history and data sources of the fishery.\tInclude links to documentation, reports.\n\n      ")
probJs
Js<-unlist(Just)
probJs<-grepl("No justification",Js)|Js==""
probJs[1]<-(Js[1]=="1. Describe the history and current status of the fishery, including fleets, sectors, vessel types and practices/gear by vessel type, landing ports, economics/markets, whether targeted/bycatch, other stocks caught in the fishery.\n\n2. Describe the stock’s ecosystem functions, dependencies, and habitat types.\n\n3. Provide all relevant reference materials, such as assessments, research, and other analysis.\nhttp://abchan.fra.go.jp/digests2019/index.html\n      ")
probJs[20]<-(Js[20]=="1. Describe what, if any, current management measures are used to constrain catch/effort.\n\n2. Describe historical management measures, if any.\n\n3. Describe main strengths and weaknesses of current monitoring and enforcement capacity.\n\n4. Describe and reference any legal/policy requirements for management, monitoring and enforcement.\n\n       ")
probJs[27]<-(Js[27]=="1. Provide the time series (specify years, if possible) that exist for catch, effort, and CPUE/abundance indices.\n\n2. Describe how these data collected (e.g., log books, dealer reporting, observers).\n\n3. Describe what types of sampling programs and methodologies exist for data collection, including the time-series of available sampling data and quality.\n\n4. Describe all sources of uncertainty in the status, biology, life history and data sources of the fishery.\tInclude links to documentation, reports.\n\n      ")
Qnams<-c(paste0("F",1:19),paste0("M",1:7),paste0("D",1:4))
list(error=any(Js),probJs=Qnams[probJs])
list(error=any(probJs),probJs=Qnams[probJs])
list(error=any(probJs),probJs=Qnams[probJs])
list(error=any(probJs),probJs=Qnams[probJs],nprob=sum(probJs))
?barplot
dat<-matrix(Jstats$nprob,30-Jstats$nprob,ncol=1)
Jstats<-checkJs()
checkJs<-function(){
Js<-unlist(Just)
probJs<-grepl("No justification",Js)|Js==""
probJs[1]<-(Js[1]=="1. Describe the history and current status of the fishery, including fleets, sectors, vessel types and practices/gear by vessel type, landing ports, economics/markets, whether targeted/bycatch, other stocks caught in the fishery.\n\n2. Describe the stock’s ecosystem functions, dependencies, and habitat types.\n\n3. Provide all relevant reference materials, such as assessments, research, and other analysis.\nhttp://abchan.fra.go.jp/digests2019/index.html\n      ")
probJs[20]<-(Js[20]=="1. Describe what, if any, current management measures are used to constrain catch/effort.\n\n2. Describe historical management measures, if any.\n\n3. Describe main strengths and weaknesses of current monitoring and enforcement capacity.\n\n4. Describe and reference any legal/policy requirements for management, monitoring and enforcement.\n\n       ")
probJs[27]<-(Js[27]=="1. Provide the time series (specify years, if possible) that exist for catch, effort, and CPUE/abundance indices.\n\n2. Describe how these data collected (e.g., log books, dealer reporting, observers).\n\n3. Describe what types of sampling programs and methodologies exist for data collection, including the time-series of available sampling data and quality.\n\n4. Describe all sources of uncertainty in the status, biology, life history and data sources of the fishery.\tInclude links to documentation, reports.\n\n      ")
Qnams<-c(paste0("F",1:19),paste0("M",1:7),paste0("D",1:4))
list(error=any(probJs),probJs=Qnams[probJs],nprob=sum(probJs))
}
Jstats<-checkJs()
dat<-matrix(Jstats$nprob,30-Jstats$nprob,ncol=1)
dat
dat<-matrix(c(Jstats$nprob,30-Jstats$nprob),ncol=1)
dat
Jstats<-checkJs()
dat<-matrix(c(Jstats$nprob,30-Jstats$nprob),ncol=1)
rownames(dat)<-c("Justified","Not justified")
barplot(dat)
dat<-matrix(c(22,8),ncol=1)
rownames(dat)<-c("Justified","Not justified")
barplot(dat)
barplot(dat,horiz=T)
dat<-matrix(c(Jstats$nprob,30-Jstats$nprob),ncol=1) #dat<-matrix(c(22,8),ncol=1)
rownames(dat)<-c("Justified","Not justified")
barplot(dat,horiz=T,col=c('red','green'))
dat<-matrix(c(22,8),ncol=1)
rownames(dat)<-c("Justified","Not justified")
barplot(dat,horiz=T,col=c('red','green'))
barplot(dat,horiz=T,col=c('red','green'),border=F,axes=F)
colfunc<-colorRampPalette(c("red","yellow","springgreen"))
cols<-colfunc(100)
plot(1:100,col=cols,pch=19)
dat<-matrix(c(22,8),ncol=1)
rownames(dat)<-c("Justified","Not justified")
colfunc<-colorRampPalette(c("springgreen","yellow","red"))
col<-colfunc(100)[ceiling(Jstats$nprob/30)]
barplot(dat,horiz=T,col=c(col,'grey'),border=F,axes=F,title=paste())
Jstats$nprob
Jstats
Jstats$nprob
ceiling(Jstats$nprob/30)
col<-colfunc(100)[ceiling(Jstats$nprob/30*100)]
col
dat<-matrix(c(22,8),ncol=1)
rownames(dat)<-c("Justified","Not justified")
colfunc<-colorRampPalette(c("springgreen","yellow","red"))
col<-colfunc(100)[ceiling(Jstats$nprob/30*100)]
barplot(dat,horiz=T,col=c(col,'grey'),border=F,axes=F,title=paste())
dat<-matrix(c(22,8),ncol=1)
rownames(dat)<-c("Justified","Not justified")
colfunc<-colorRampPalette(c("springgreen","yellow","red"))
col<-colfunc(100)[ceiling(dat[1,1]/30*100)]
barplot(dat,horiz=T,col=c(col,'grey'),border=F,axes=F,title=paste())
Jstats<-checkJs()
dat<-matrix(c(Jstats$nprob,30-Jstats$nprob),ncol=1) #dat<-matrix(c(22,8),ncol=1)
rownames(dat)<-c("Justified","Not justified")
colfunc<-colorRampPalette(c("springgreen","yellow","red"))
col<-colfunc(100)[ceiling(dat[1,1]/30*100)]
barplot(dat,horiz=T,col=c(col,'grey'),border=F,axes=F,title=paste())
dat<-matrix(c(22,8),ncol=1)
rownames(dat)<-c("Justified","Not justified")
colfunc<-colorRampPalette(c("springgreen","yellow","red"))
coly<-colfunc(100)[ceiling(dat[1,1]/30*100)]
barplot(dat,horiz=T,col=c(coly,'grey'),border=F,axes=F,title=paste(30-Jstats$nprob "questions were provided with justifications"),title.col=coly)
barplot(dat,horiz=T,col=c(coly,'grey'),border=F,axes=F,title=paste(30-Jstats$nprob "questions were provided with justifications"))
barplot(dat,horiz=T,col=c(coly,'grey'),border=F,axes=F,title=paste(30-Jstats$nprob, "questions were provided with justifications"))
barplot(dat,horiz=T,col=c(coly,'grey'),border=F,axes=F,main=paste(30-Jstats$nprob, "questions were provided with justifications"))
Jstats<-checkJs()
dat<-matrix(c(Jstats$nprob,30-Jstats$nprob),ncol=1) #dat<-matrix(c(22,8),ncol=1)
rownames(dat)<-c("Justified","Not justified")
colfunc<-colorRampPalette(c("springgreen","yellow","red"))
coly<-colfunc(100)[ceiling(dat[1,1]/30*100)]
barplot(dat,horiz=T,col=c(coly,'grey'),border=F,axes=F,main=paste(30-Jstats$nprob, "questions were provided with justifications"))
runApp('inst/shiny_apps/MERA')
barplot(dat,horiz=T,col=c('red','green'),border=F,axes=F,main=paste(30-Jstats$nprob, "questions were provided with justifications"))
barplot(dat,horiz=T,col=c('red','green'),border=F,axes=F,main=paste(30-Jstats$nprob, "questions were provided with justifications"),col.main=coly)
runApp('inst/shiny_apps/MERA')
source('C:/GitHub/MERA/inst/shiny_apps/MERA/Source/App/Update_objects.R', encoding = 'UTF-8', echo=TRUE)
runApp('inst/shiny_apps/MERA')
Just<-readRDS("C:/temp/Just.rda")
Just<-readRDS("C:/temp/Just.rds")
Just
Js<-unlist(Just)
probJs<-grepl("No justification",Js)|Js==""
checkJs<-function(){
Js<-unlist(Just)
probJs<-grepl("No justification",Js)|Js==""
probJs[1]<-(Js[1]=="1. Describe the history and current status of the fishery, including fleets, sectors, vessel types and practices/gear by vessel type, landing ports, economics/markets, whether targeted/bycatch, other stocks caught in the fishery.\n\n2. Describe the stock’s ecosystem functions, dependencies, and habitat types.\n\n3. Provide all relevant reference materials, such as assessments, research, and other analysis.\nhttp://abchan.fra.go.jp/digests2019/index.html\n      ")
probJs[20]<-(Js[20]=="1. Describe what, if any, current management measures are used to constrain catch/effort.\n\n2. Describe historical management measures, if any.\n\n3. Describe main strengths and weaknesses of current monitoring and enforcement capacity.\n\n4. Describe and reference any legal/policy requirements for management, monitoring and enforcement.\n\n       ")
probJs[27]<-(Js[27]=="1. Provide the time series (specify years, if possible) that exist for catch, effort, and CPUE/abundance indices.\n\n2. Describe how these data collected (e.g., log books, dealer reporting, observers).\n\n3. Describe what types of sampling programs and methodologies exist for data collection, including the time-series of available sampling data and quality.\n\n4. Describe all sources of uncertainty in the status, biology, life history and data sources of the fishery.\tInclude links to documentation, reports.\n\n      ")
Qnams<-c(paste0("F",1:19),paste0("M",1:7),paste0("D",1:4))
list(error=any(probJs),probJs=Qnams[probJs],nprob=sum(probJs))
}
Jstats<-checkJs()
Jstats
dat<-matrix(c(Jstats$nprob,30-Jstats$nprob),ncol=1) #dat<-matrix(c(22,8),ncol=1)
rownames(dat)<-c("Justified","Not justified")
colfunc<-colorRampPalette(c("springgreen","yellow","red"))
coly<-colfunc(100)[ceiling(dat[1,1]/30*99+0.01)]
par(mai=c(0.01,0.01,0.3,0.01))
barplot(dat,horiz=T,col=c('red','green'),border=F,axes=F,main=paste0(30-Jstats$nprob, " question",c("","s")[Jstats$nprob!=1], " were provided with justifications",collapse=""),col.main=coly)
paste0(30-Jstats$nprob, " question",c("","s")[Jstats$nprob!=1], " were provided with justifications",collapse="")
Jstats<-checkJs()
dat<-matrix(c(Jstats$nprob,30-Jstats$nprob),ncol=1) #dat<-matrix(c(22,8),ncol=1)
rownames(dat)<-c("Justified","Not justified")
colfunc<-colorRampPalette(c("springgreen","yellow","red"))
coly<-colfunc(100)[ceiling(dat[1,1]/30*99+0.01)]
par(mai=c(0.01,0.01,0.3,0.01))
barplot(dat,horiz=T,col=c('red','green'),border=F,axes=F,main=paste0(30-Jstats$nprob, " question",c("","s")[as.integer(Jstats$nprob!=1)], " were provided with justifications",collapse=""),col.main=coly)
Jstats$nprob!=1
as.integer(Jstats$nprob!=1)
Jstats<-checkJs()
dat<-matrix(c(Jstats$nprob,30-Jstats$nprob),ncol=1) #dat<-matrix(c(22,8),ncol=1)
rownames(dat)<-c("Justified","Not justified")
colfunc<-colorRampPalette(c("springgreen","yellow","red"))
coly<-colfunc(100)[ceiling(dat[1,1]/30*99+0.01)]
par(mai=c(0.01,0.01,0.3,0.01))
barplot(dat,horiz=T,col=c('red','green'),border=F,axes=F,main=paste0(30-Jstats$nprob, " question",c("","s")[as.integer(Jstats$nprob!=1)+1], " were provided with justifications",collapse=""),col.main=coly)
runApp('inst/shiny_apps/MERA')
Just<-readRDS("C:/temp/Just.rds")
Just
Js<-unlist(Just)
probJs<-grepl("No justification",Js)|Js==""
probJs
probJs[1]<-(Js[1]=="1. Describe the history and current status of the fishery, including fleets, sectors, vessel types and practices/gear by vessel type, landing ports, economics/markets, whether targeted/bycatch, other stocks caught in the fishery.\n\n2. Describe the stock’s ecosystem functions, dependencies, and habitat types.\n\n3. Provide all relevant reference materials, such as assessments, research, and other analysis.\nhttp://abchan.fra.go.jp/digests2019/index.html\n      ")
probJs[20]<-(Js[20]=="1. Describe what, if any, current management measures are used to constrain catch/effort.\n\n2. Describe historical management measures, if any.\n\n3. Describe main strengths and weaknesses of current monitoring and enforcement capacity.\n\n4. Describe and reference any legal/policy requirements for management, monitoring and enforcement.\n\n       ")
probJs[27]<-(Js[27]=="1. Provide the time series (specify years, if possible) that exist for catch, effort, and CPUE/abundance indices.\n\n2. Describe how these data collected (e.g., log books, dealer reporting, observers).\n\n3. Describe what types of sampling programs and methodologies exist for data collection, including the time-series of available sampling data and quality.\n\n4. Describe all sources of uncertainty in the status, biology, life history and data sources of the fishery.\tInclude links to documentation, reports.\n\n      ")
probJs
Js[1]
probJs[1]<-(Js[1]=="1. Describe the history and current status of the fishery, including fleets, sectors, vessel types and practices/gear by vessel type, landing ports, economics/markets, whether targeted/bycatch, other stocks caught in the fishery.\n\n2. Describe the stock’s ecosystem functions, dependencies, and habitat types.\n\n3. Provide all relevant reference materials, such as assessments, research, and other analysis.\n\n      ")
probJs
Jstats$nprob
Js<-unlist(Just)
probJs<-grepl("No justification",Js)|Js==""
probJs[1]<-(Js[1]=="1. Describe the history and current status of the fishery, including fleets, sectors, vessel types and practices/gear by vessel type, landing ports, economics/markets, whether targeted/bycatch, other stocks caught in the fishery.\n\n2. Describe the stock’s ecosystem functions, dependencies, and habitat types.\n\n3. Provide all relevant reference materials, such as assessments, research, and other analysis.\n\n      ")
probJs[20]<-(Js[20]=="1. Describe what, if any, current management measures are used to constrain catch/effort.\n\n2. Describe historical management measures, if any.\n\n3. Describe main strengths and weaknesses of current monitoring and enforcement capacity.\n\n4. Describe and reference any legal/policy requirements for management, monitoring and enforcement.\n\n       ")
probJs[27]<-(Js[27]=="1. Provide the time series (specify years, if possible) that exist for catch, effort, and CPUE/abundance indices.\n\n2. Describe how these data collected (e.g., log books, dealer reporting, observers).\n\n3. Describe what types of sampling programs and methodologies exist for data collection, including the time-series of available sampling data and quality.\n\n4. Describe all sources of uncertainty in the status, biology, life history and data sources of the fishery.\tInclude links to documentation, reports.\n\n      ")
probJs[1]<-F
Qnams<-c(paste0("F",1:19),paste0("M",1:7),paste0("D",1:4))
Just[[1]][1]<-"ass"
Jstats<-checkJs()
Jstats
dat<-matrix(c(Jstats$nprob,30-Jstats$nprob),ncol=1) #dat<-matrix(c(22,8),ncol=1)
rownames(dat)<-c("Justified","Not justified")
colfunc<-colorRampPalette(c("springgreen","yellow","red"))
coly<-colfunc(1000)[ceiling(dat[1,1]/30*999)+0.01]
par(mai=c(0.01,0.01,0.3,0.01))
barplot(dat,horiz=T,col=c('red','green'),border=F,axes=F,main=paste0(30-Jstats$nprob, " question",c(" was","s were")[as.integer(Jstats$nprob!=1)+1], " provided with justifications",collapse=""),col.main=coly)
as.integer(Jstats$nprob!=1)
c(" was","s were")[as.integer(Jstats$nprob!=1)+1]
as.integer(Jstats$nprob!=1)+1
barplot(dat,horiz=T,col=c('red','green'),border=F,axes=F,main=paste0(30-Jstats$nprob, " question",c(" was","s were")[as.integer(Jstats$nprob!=29)+1], " provided with justifications",collapse=""),col.main=coly)
Jstats<-checkJs()
dat<-matrix(c(Jstats$nprob,30-Jstats$nprob),ncol=1) #dat<-matrix(c(22,8),ncol=1)
rownames(dat)<-c("Justified","Not justified")
colfunc<-colorRampPalette(c("springgreen","yellow","red"))
coly<-colfunc(1000)[ceiling(dat[1,1]/30*999)+0.01]
par(mai=c(0.01,0.01,0.3,0.01))
singular=as.integer(Jstats$nprob!=29)+1
barplot(dat,horiz=T,col=c('red','green'),border=F,axes=F,main=paste0(30-Jstats$nprob, " question",c(" was","s were")[singular], " provided with justification",c("","s")[singular],collapse=""),col.main=coly)
runApp('inst/shiny_apps/MERA')
runApp('inst/shiny_apps/MERA')
PanelState<-readRDS("C:/temp/PanelState_autosave.rds")
PanelState
PanelState[[1]]
runApp('inst/shiny_apps/MERA')
shiny::runApp('inst/shiny_apps/MERA')
?updateSelectInput
runApp('inst/shiny_apps/MERA')
Status<-readRDS("C:/temp/Status.rda")
ncode<-length(Status$codes)
qs<-matrix(NA,nrow=ncode,ncol=5)
for(i in 1:ncode){
if(length(Status$Est[[i]])>2){
qs[i,]<-round(quantile(Status$Est[[i]]*100,c(0.025,0.05,0.5,0.95,0.975)),2)
}else{
qs[i,]<-NA
}
}
ncode
Status$codes
names(Status)
Status<-readRDS("C:/temp/Status.rda")
Status
runApp('inst/shiny_apps/MERA')
Status<-readRDS("C:/temp/Status.rda")
Status
runApp('inst/shiny_apps/MERA')
Status<-readRDS("C:/temp/Status.rda")
names(Status)
Status$codes
ncode<-length(Status$codes)
qs<-matrix(NA,nrow=ncode,ncol=5)
for(i in 1:ncode){
if(length(Status$Est[[i]])>2){
qs[i,]<-round(quantile(Status$Est[[i]]*100,c(0.025,0.05,0.5,0.95,0.975)),2)
}else{
qs[i,]<-NA
}
}
qs
conv<-round(unlist(lapply(Status$Est,length))/Status$nsim*100,2)
tab<-as.data.frame(cbind(Status$codes,qs,conv))
names(tab)<-c("Method","2.5%","5%","Median","95%","97.5%","Conv %")
datatable(tab,caption="Stock status estimates (SSB relative to 'unfished')",
extensions = 'Buttons',
options=list(buttons =
list('copy', list(
extend = 'collection',
buttons = c('csv', 'excel', 'pdf'),
text = 'Download'
)),
dom = 'Brti')
)
tab
conv
Status$Est
unlist(lapply(Status$Est,length))
Status$nsim
runApp('inst/shiny_apps/MERA')
