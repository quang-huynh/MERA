
# Redo MSE functions

redoPlan<-function(fease=F){

  withProgress(message = "Calculating Evaluation results", value = 0, {

    nres<-length(Skin$Planning$Tab_title)
    dims<-list(nMPs=MSEobj@nMPs)
    incrate<-1/nres
    
    # option code
    #options <- list(burnin = input$burnin, res=input$res)
    options <- list( res=1)
     
    for(res in 1:nres){
      
      local({
        
        res2<-res
        
        if(Skin$Planning$Tab_title[[res2]]==""){
          output[[paste0("P_Tab_",res2,"_title")]]<-renderText(NULL)
          output[[paste0("P_Tab_",res2,"_text")]]<-renderText(NULL)
          output[[paste0("P_Tab_",res2)]]<-DT::renderDataTable(NULL) 
        }else{
          output[[paste0("P_Tab_",res2,"_title")]]<-renderText(Skin$Planning$Tab_title[[res2]])
          output[[paste0("P_Tab_",res2,"_text")]]<-renderText(Skin$Planning$Tab_text[[res2]])
          output[[paste0("P_Tab_",res2)]]<-DT::renderDataTable(Skin$Planning$Tabs[[res2]](MSEobj,MSEobj_reb,options)) 
        }
        
        if(Skin$Planning$Fig_title[[res2]]==""){
          output[[paste0("P_Fig_",res2,"_title")]]<-renderText(NULL)
          output[[paste0("P_Fig_",res2,"_text")]]<-renderText(NULL)
          output[[paste0("P_Fig_",res2)]]<-renderPlot(NULL) 
         }else{ 
          output[[paste0("P_Fig_",res2,"_title")]]<-renderText(Skin$Planning$Fig_title[[res2]])
          output[[paste0("P_Fig_",res2,"_text")]]<-renderText(Skin$Planning$Fig_text[[res2]])
          height=Skin$Planning$Fig_dim[[res2]](dims)$height
          width=Skin$Planning$Fig_dim[[res2]](dims)$width
          output[[paste0("P_Fig_",res2)]]<-renderPlot(Skin$Planning$Figs[[res2]](MSEobj,MSEobj_reb,options), height =ceiling(height) , width = ceiling(width)) 
        }
        
      })
      
      incProgress(incrate)
      
    }
    
    # Blank additional non-specified Figs / Tabs
    
    if(nres<9){
      
      for(res in (nres+1):9){
        local({
          res2<-res
          output[[paste0("P_Tab_",res2,"_title")]]<-renderText(NULL)
          output[[paste0("P_Tab_",res2,"_text")]]<-renderText(NULL)
          output[[paste0("P_Tab_",res2)]]<-DT::renderDataTable(NULL)
          
          output[[paste0("P_Fig_",res2,"_title")]]<-renderText(NULL)
          output[[paste0("P_Fig_",res2,"_text")]]<-renderText(NULL)
          output[[paste0("P_Fig_",res2)]]<-renderPlot(NULL)
          
        })
      }
    
    }
  
    incProgress(incrate)

  })
}


redoEval<-function(fease=F){
  
  withProgress(message = "Calculating Evaluation results", value = 0, {
    
    nres<-length(Skin$Evaluation$Tab_title)
    dims<-list(nMPs=MSEobj@nMPs)
    incrate<-1/nres
    
    # option code
    #options <- list(burnin = input$burnin, res=input$res)
    options <- list(burnin = input$YIU, res=1)
    
    for(res in 1:nres){
      
      local({
        
        res2<-res
        
        if(Skin$Evaluation$Tab_title[[res2]]==""){
          output[[paste0("P_Tab_",res2,"_title")]]<-renderText(NULL)
          output[[paste0("P_Tab_",res2,"_text")]]<-renderText(NULL)
          output[[paste0("P_Tab_",res2)]]<-DT::renderDataTable(NULL) 
        }else{
          output[[paste0("P_Tab_",res2,"_title")]]<-renderText(Skin$Evaluation$Tab_title[[res2]])
          output[[paste0("P_Tab_",res2,"_text")]]<-renderText(Skin$Evaluation$Tab_text[[res2]])
          output[[paste0("P_Tab_",res2)]]<-DT::renderDataTable(Skin$Evaluation$Tabs[[res2]](MSEobj,MSEobj_reb,options)) 
        }
        
        if(Skin$Evaluation$Fig_title[[res2]]==""){
          output[[paste0("P_Fig_",res2,"_title")]]<-renderText(NULL)
          output[[paste0("P_Fig_",res2,"_text")]]<-renderText(NULL)
          output[[paste0("P_Fig_",res2)]]<-renderPlot(NULL) 
        }else{ 
          output[[paste0("P_Fig_",res2,"_title")]]<-renderText(Skin$Evaluation$Fig_title[[res2]])
          output[[paste0("P_Fig_",res2,"_text")]]<-renderText(Skin$Evaluation$Fig_text[[res2]])
          height=Skin$Evaluation$Fig_dim[[res2]](dims)$height
          width=Skin$Evaluation$Fig_dim[[res2]](dims)$width
          output[[paste0("P_Fig_",res2)]]<-renderPlot(Skin$Evaluation$Figs[[res2]](MSEobj,MSEobj_reb,options), height =ceiling(height) , width = ceiling(width)) 
        }
        
      })
      
      incProgress(incrate)
      
    }
    
    
    if(nres<9){
      
      for(res in (nres+1):9){
        local({
          res2<-res
          output[[paste0("P_Tab_",res2,"_title")]]<-renderText(NULL)
          output[[paste0("P_Tab_",res2,"_text")]]<-renderText(NULL)
          output[[paste0("P_Tab_",res2)]]<-DT::renderDataTable(NULL)
          
          output[[paste0("P_Fig_",res2,"_title")]]<-renderText(NULL)
          output[[paste0("P_Fig_",res2,"_text")]]<-renderText(NULL)
          output[[paste0("P_Fig_",res2)]]<-renderPlot(NULL)
          
        })
      }
      
    }
 
    incProgress(incrate)
     
  })
}


redoRA<-function(fease=F){
  
  withProgress(message = "Calculating Risk Assessment results", value = 0, {
    
    nres<-length(Skin$Risk_Assessment$Tab_title)
    dims<-list(nMPs=MSEobj@nMPs)
    incrate<-1/nres
    
    # option code
    #options <- list(burnin = input$burnin, res=input$res)
    #options <- list(burnin = input$YIU, res=1)
    
    for(res in 1:1){
      
      local({
        
        res2<-res
        
        if(Skin$Evaluation$Tab_title[[res2]]==""){
          output[[paste0("P_Tab_",res2,"_title")]]<-renderText(NULL)
          output[[paste0("P_Tab_",res2,"_text")]]<-renderText(NULL)
          output[[paste0("P_Tab_",res2)]]<-DT::renderDataTable(NULL) 
        }else{
          output[[paste0("P_Tab_",res2,"_title")]]<-renderText(Skin$Risk_Assessment$Tab_title[[res2]])
          output[[paste0("P_Tab_",res2,"_text")]]<-renderText(Skin$Risk_Assessment$Tab_text[[res2]])
          output[[paste0("P_Tab_",res2)]]<-DT::renderDataTable(Skin$Risk_Assessment$Tabs[[res2]](MSEobj,MSEobj_reb,options)) 
        }
        
        if(Skin$Evaluation$Fig_title[[res2]]==""){
          output[[paste0("P_Fig_",res2,"_title")]]<-renderText(NULL)
          output[[paste0("P_Fig_",res2,"_text")]]<-renderText(NULL)
          output[[paste0("P_Fig_",res2)]]<-renderPlot(NULL) 
        }else{ 
          output[[paste0("P_Fig_",res2,"_title")]]<-renderText(Skin$Risk_Assessment$Fig_title[[res2]])
          output[[paste0("P_Fig_",res2,"_text")]]<-renderText(Skin$Risk_Assessment$Fig_text[[res2]])
          #height=Skin$Risk_Assessment$Fig_dim[[res2]](dims)$height
          #width=Skin$Risk_Assessment$Fig_dim[[res2]](dims)$width
          output[[paste0("P_Fig_",res2)]]<-renderPlot(Skin$Risk_Assessment$Figs[[res2]](MSEobj,MSEobj_reb,options), height =ceiling(400) , width = ceiling(1000)) 
        }
        
      })
      
      incProgress(incrate)
      
    }
    
    
    if(nres<9){
      
      for(res in (nres+1):9){
        local({
          res2<-res
          output[[paste0("P_Tab_",res2,"_title")]]<-renderText(NULL)
          output[[paste0("P_Tab_",res2,"_text")]]<-renderText(NULL)
          output[[paste0("P_Tab_",res2)]]<-DT::renderDataTable(NULL)
          
          output[[paste0("P_Fig_",res2,"_title")]]<-renderText(NULL)
          output[[paste0("P_Fig_",res2,"_text")]]<-renderText(NULL)
          output[[paste0("P_Fig_",res2)]]<-renderPlot(NULL)
          
        })
      }
      
    }
    
    incProgress(incrate)
    
  })
}


redoInd<-function(){

  styr=max(dat@Year)-min(dat@Year)+1
  PPD<-MSEobj_app@Misc[[1]]

  # Standardization
  PPD@Cat<-PPD@Cat/PPD@Cat[,styr]
  PPD@Ind<-PPD@Ind/PPD@Ind[,styr]
  PPD@ML<-PPD@ML/PPD@ML[,styr]

  tsd= c("Cat","Cat","Cat","Ind","Ind","ML")
  stat=c("slp","AAV","mu","slp","mu", "slp")
  res<-max(dat_ind@Year-max(dat@Year))
  datayears<-dim(dat_ind@Cat)[2]

  indPPD<-getinds(PPD,styr=styr,res=res,tsd=tsd,stat=stat)

  # Standardization
  dat_ind@Cat<-dat_ind@Cat/dat_ind@Cat[,styr]
  dat_ind@Ind<-dat_ind@Ind/dat_ind@Ind[,styr]
  dat_ind@ML<-dat_ind@ML/dat_ind@ML[,styr]

  indData<-getinds(dat_ind,styr=styr,res=res,tsd=tsd,stat=stat)

  output$CC<-renderPlot( CC(indPPD,indData,pp=1,res=res),height =700 ,width=700)
  output$mdist<-renderPlot(plot_mdist(indPPD,indData,alpha=input$Ind_Alpha),height =550 ,width=550)

}
